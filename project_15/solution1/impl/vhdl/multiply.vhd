-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : IN STD_LOGIC;
    B_TREADY : OUT STD_LOGIC;
    C_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
    C_TVALID : OUT STD_LOGIC;
    C_TREADY : IN STD_LOGIC );
end;


architecture behav of multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multiply_multiply,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.080000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=145,HLS_SYN_LUT=147,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal B_TDATA_blk_n : STD_LOGIC;
    signal C_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal regslice_both_C_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_V_fu_53_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal b_V_fu_57_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_69_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_A_U_apdone_blk : STD_LOGIC;
    signal A_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal A_TVALID_int_regslice : STD_LOGIC;
    signal A_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_A_U_ack_in : STD_LOGIC;
    signal regslice_both_B_U_apdone_blk : STD_LOGIC;
    signal B_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal B_TVALID_int_regslice : STD_LOGIC;
    signal B_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_B_U_ack_in : STD_LOGIC;
    signal C_TVALID_int_regslice : STD_LOGIC;
    signal C_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_C_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component multiply_mul_28s_28s_56_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component multiply_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_28s_28s_56_3_1_U1 : component multiply_mul_28s_28s_56_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => b_V_fu_57_p1,
        din1 => a_V_fu_53_p1,
        ce => grp_fu_69_ce,
        dout => grp_fu_69_p2);

    regslice_both_A_U : component multiply_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TDATA,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_U_ack_in,
        data_out => A_TDATA_int_regslice,
        vld_out => A_TVALID_int_regslice,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_U_apdone_blk);

    regslice_both_B_U : component multiply_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => B_TDATA,
        vld_in => B_TVALID,
        ack_in => regslice_both_B_U_ack_in,
        data_out => B_TDATA_int_regslice,
        vld_out => B_TVALID_int_regslice,
        ack_out => B_TREADY_int_regslice,
        apdone_blk => regslice_both_B_U_apdone_blk);

    regslice_both_C_U : component multiply_regslice_both
    generic map (
        DataWidth => 56)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fu_69_p2,
        vld_in => C_TVALID_int_regslice,
        ack_in => C_TREADY_int_regslice,
        data_out => C_TDATA,
        vld_out => regslice_both_C_U_vld_out,
        ack_out => C_TREADY,
        apdone_blk => regslice_both_C_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, A_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_TDATA_blk_n <= A_TVALID_int_regslice;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_TREADY <= regslice_both_A_U_ack_in;

    A_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_TREADY_int_regslice <= ap_const_logic_1;
        else 
            A_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    B_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, B_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_TDATA_blk_n <= B_TVALID_int_regslice;
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TREADY <= regslice_both_B_U_ack_in;

    B_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_TREADY_int_regslice <= ap_const_logic_1;
        else 
            B_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    C_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, C_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            C_TDATA_blk_n <= C_TREADY_int_regslice;
        else 
            C_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_TVALID <= regslice_both_C_U_vld_out;

    C_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            C_TVALID_int_regslice <= ap_const_logic_1;
        else 
            C_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    a_V_fu_53_p1 <= A_TDATA_int_regslice(28 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_C_U_apdone_blk, A_TVALID_int_regslice, B_TVALID_int_regslice, C_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_C_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = C_TREADY_int_regslice))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = C_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = B_TVALID_int_regslice) or (ap_const_logic_0 = A_TVALID_int_regslice))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_C_U_apdone_blk, A_TVALID_int_regslice, B_TVALID_int_regslice, C_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_C_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = C_TREADY_int_regslice))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = C_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = B_TVALID_int_regslice) or (ap_const_logic_0 = A_TVALID_int_regslice))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_C_U_apdone_blk, A_TVALID_int_regslice, B_TVALID_int_regslice, C_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_C_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = C_TREADY_int_regslice))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = C_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = B_TVALID_int_regslice) or (ap_const_logic_0 = A_TVALID_int_regslice))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(A_TVALID_int_regslice, B_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = B_TVALID_int_regslice) or (ap_const_logic_0 = A_TVALID_int_regslice));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(C_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (ap_const_logic_0 = C_TREADY_int_regslice);
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(regslice_both_C_U_apdone_blk, C_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((regslice_both_C_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = C_TREADY_int_regslice));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_V_fu_57_p1 <= B_TDATA_int_regslice(28 - 1 downto 0);

    grp_fu_69_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_69_ce <= ap_const_logic_1;
        else 
            grp_fu_69_ce <= ap_const_logic_0;
        end if; 
    end process;

end behav;
