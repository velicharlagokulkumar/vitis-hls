// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply_multiply,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.080000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=145,HLS_SYN_LUT=147,HLS_VERSION=2022_2}" *)

module multiply (
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        C_TDATA,
        C_TVALID,
        C_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [31:0] B_TDATA;
input   B_TVALID;
output   B_TREADY;
output  [55:0] C_TDATA;
output   C_TVALID;
input   C_TREADY;

 reg    ap_rst_n_inv;
reg    A_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    B_TDATA_blk_n;
reg    C_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    regslice_both_C_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [55:0] grp_fu_69_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [27:0] a_V_fu_53_p1;
wire  signed [27:0] b_V_fu_57_p1;
reg    grp_fu_69_ce;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_A_U_apdone_blk;
wire   [31:0] A_TDATA_int_regslice;
wire    A_TVALID_int_regslice;
reg    A_TREADY_int_regslice;
wire    regslice_both_A_U_ack_in;
wire    regslice_both_B_U_apdone_blk;
wire   [31:0] B_TDATA_int_regslice;
wire    B_TVALID_int_regslice;
reg    B_TREADY_int_regslice;
wire    regslice_both_B_U_ack_in;
reg    C_TVALID_int_regslice;
wire    C_TREADY_int_regslice;
wire    regslice_both_C_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

multiply_mul_28s_28s_56_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 56 ))
mul_28s_28s_56_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(b_V_fu_57_p1),
    .din1(a_V_fu_53_p1),
    .ce(grp_fu_69_ce),
    .dout(grp_fu_69_p2)
);

multiply_regslice_both #(
    .DataWidth( 32 ))
regslice_both_A_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TDATA),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_U_ack_in),
    .data_out(A_TDATA_int_regslice),
    .vld_out(A_TVALID_int_regslice),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_U_apdone_blk)
);

multiply_regslice_both #(
    .DataWidth( 32 ))
regslice_both_B_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(B_TDATA),
    .vld_in(B_TVALID),
    .ack_in(regslice_both_B_U_ack_in),
    .data_out(B_TDATA_int_regslice),
    .vld_out(B_TVALID_int_regslice),
    .ack_out(B_TREADY_int_regslice),
    .apdone_blk(regslice_both_B_U_apdone_blk)
);

multiply_regslice_both #(
    .DataWidth( 56 ))
regslice_both_C_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_fu_69_p2),
    .vld_in(C_TVALID_int_regslice),
    .ack_in(C_TREADY_int_regslice),
    .data_out(C_TDATA),
    .vld_out(regslice_both_C_U_vld_out),
    .ack_out(C_TREADY),
    .apdone_blk(regslice_both_C_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TDATA_blk_n = A_TVALID_int_regslice;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TREADY_int_regslice = 1'b1;
    end else begin
        A_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_TDATA_blk_n = B_TVALID_int_regslice;
    end else begin
        B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_TREADY_int_regslice = 1'b1;
    end else begin
        B_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        C_TDATA_blk_n = C_TREADY_int_regslice;
    end else begin
        C_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_TVALID_int_regslice = 1'b1;
    end else begin
        C_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_69_ce = 1'b1;
    end else begin
        grp_fu_69_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_TREADY = regslice_both_A_U_ack_in;

assign B_TREADY = regslice_both_B_U_ack_in;

assign C_TVALID = regslice_both_C_U_vld_out;

assign a_V_fu_53_p1 = A_TDATA_int_regslice[27:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_C_U_apdone_blk == 1'b1) | (1'b0 == C_TREADY_int_regslice))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == C_TREADY_int_regslice)) | ((1'b1 == 1'b1) & ((1'b0 == B_TVALID_int_regslice) | (1'b0 == A_TVALID_int_regslice))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_C_U_apdone_blk == 1'b1) | (1'b0 == C_TREADY_int_regslice))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == C_TREADY_int_regslice)) | ((1'b1 == 1'b1) & ((1'b0 == B_TVALID_int_regslice) | (1'b0 == A_TVALID_int_regslice))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_C_U_apdone_blk == 1'b1) | (1'b0 == C_TREADY_int_regslice))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == C_TREADY_int_regslice)) | ((1'b1 == 1'b1) & ((1'b0 == B_TVALID_int_regslice) | (1'b0 == A_TVALID_int_regslice))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == B_TVALID_int_regslice) | (1'b0 == A_TVALID_int_regslice));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == C_TREADY_int_regslice);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_C_U_apdone_blk == 1'b1) | (1'b0 == C_TREADY_int_regslice));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_V_fu_57_p1 = B_TDATA_int_regslice[27:0];

endmodule //multiply
