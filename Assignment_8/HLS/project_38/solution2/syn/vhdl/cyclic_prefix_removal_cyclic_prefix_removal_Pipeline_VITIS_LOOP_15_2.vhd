-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cyclic_prefix_removal_cyclic_prefix_removal_Pipeline_VITIS_LOOP_15_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_samples_TREADY : IN STD_LOGIC;
    arr_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    arr_real_ce0 : OUT STD_LOGIC;
    arr_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    arr_imag_ce0 : OUT STD_LOGIC;
    arr_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_samples_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_samples_TVALID : OUT STD_LOGIC );
end;


architecture behav of cyclic_prefix_removal_cyclic_prefix_removal_Pipeline_VITIS_LOOP_15_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_260 : STD_LOGIC_VECTOR (13 downto 0) := "00001001100000";
    constant ap_const_lv13_140 : STD_LOGIC_VECTOR (12 downto 0) := "0000101000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln17_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln15_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_samples_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln17_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln21_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_54 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_fu_125_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (13 downto 0);
    signal p_s_fu_184_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_0_fu_201_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_131_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_fu_147_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln15_fu_115_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln18_fu_159_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln21_1_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln18_1_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln18_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_226 : BOOLEAN;
    signal ap_condition_128 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cyclic_prefix_removal_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cyclic_prefix_removal_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_54 <= add_ln15_fu_125_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_54 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln17_reg_220 <= icmp_ln17_fu_141_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln15_fu_125_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv14_1));
    add_ln18_fu_159_p2 <= std_logic_vector(unsigned(trunc_ln15_fu_115_p1) + unsigned(ap_const_lv13_140));
    add_ln21_fu_147_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv14_260));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, out_samples_TREADY, icmp_ln17_reg_220)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln17_reg_220 = ap_const_lv1_1) and (out_samples_TREADY = ap_const_logic_0)) or ((icmp_ln17_reg_220 = ap_const_lv1_0) and (out_samples_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, out_samples_TREADY, icmp_ln17_reg_220, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln17_reg_220 = ap_const_lv1_1) and (out_samples_TREADY = ap_const_logic_0)) or ((icmp_ln17_reg_220 = ap_const_lv1_0) and (out_samples_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, out_samples_TREADY, icmp_ln17_reg_220, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln17_reg_220 = ap_const_lv1_1) and (out_samples_TREADY = ap_const_logic_0)) or ((icmp_ln17_reg_220 = ap_const_lv1_0) and (out_samples_TREADY = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(out_samples_TREADY, icmp_ln17_reg_220)
    begin
                ap_block_state2_io <= (((icmp_ln17_reg_220 = ap_const_lv1_1) and (out_samples_TREADY = ap_const_logic_0)) or ((icmp_ln17_reg_220 = ap_const_lv1_0) and (out_samples_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(out_samples_TREADY, icmp_ln17_reg_220)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((icmp_ln17_reg_220 = ap_const_lv1_1) and (out_samples_TREADY = ap_const_logic_0)) or ((icmp_ln17_reg_220 = ap_const_lv1_0) and (out_samples_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_128_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_128 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_226_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln15_fu_119_p2, ap_block_pp0_stage0)
    begin
                ap_condition_226 <= ((icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln15_fu_119_p2)
    begin
        if (((icmp_ln15_fu_119_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_54, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_54;
        end if; 
    end process;


    arr_imag_address0_assign_proc : process(icmp_ln17_fu_141_p2, zext_ln21_fu_153_p1, zext_ln18_fu_165_p1, ap_condition_226)
    begin
        if ((ap_const_boolean_1 = ap_condition_226)) then
            if ((icmp_ln17_fu_141_p2 = ap_const_lv1_1)) then 
                arr_imag_address0 <= zext_ln18_fu_165_p1(14 - 1 downto 0);
            elsif ((icmp_ln17_fu_141_p2 = ap_const_lv1_0)) then 
                arr_imag_address0 <= zext_ln21_fu_153_p1(14 - 1 downto 0);
            else 
                arr_imag_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            arr_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln15_fu_119_p2, icmp_ln17_fu_141_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln17_fu_141_p2 = ap_const_lv1_1) and (icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln17_fu_141_p2 = ap_const_lv1_0) and (icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            arr_imag_ce0 <= ap_const_logic_1;
        else 
            arr_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_real_address0_assign_proc : process(icmp_ln17_fu_141_p2, zext_ln21_fu_153_p1, zext_ln18_fu_165_p1, ap_condition_226)
    begin
        if ((ap_const_boolean_1 = ap_condition_226)) then
            if ((icmp_ln17_fu_141_p2 = ap_const_lv1_1)) then 
                arr_real_address0 <= zext_ln18_fu_165_p1(14 - 1 downto 0);
            elsif ((icmp_ln17_fu_141_p2 = ap_const_lv1_0)) then 
                arr_real_address0 <= zext_ln21_fu_153_p1(14 - 1 downto 0);
            else 
                arr_real_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            arr_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln15_fu_119_p2, icmp_ln17_fu_141_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln17_fu_141_p2 = ap_const_lv1_1) and (icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln17_fu_141_p2 = ap_const_lv1_0) and (icmp_ln15_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            arr_real_ce0 <= ap_const_logic_1;
        else 
            arr_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln18_1_fu_197_p1 <= arr_imag_q0;
    bitcast_ln18_fu_193_p1 <= arr_real_q0;
    bitcast_ln21_1_fu_180_p1 <= arr_imag_q0;
    bitcast_ln21_fu_176_p1 <= arr_real_q0;
    icmp_ln15_fu_119_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv14_2000) else "0";
    icmp_ln17_fu_141_p2 <= "1" when (tmp_fu_131_p4 = ap_const_lv2_0) else "0";

    out_samples_TDATA_assign_proc : process(icmp_ln17_reg_220, p_s_fu_184_p3, p_0_fu_201_p3, ap_condition_128)
    begin
        if ((ap_const_boolean_1 = ap_condition_128)) then
            if ((icmp_ln17_reg_220 = ap_const_lv1_1)) then 
                out_samples_TDATA <= p_0_fu_201_p3;
            elsif ((icmp_ln17_reg_220 = ap_const_lv1_0)) then 
                out_samples_TDATA <= p_s_fu_184_p3;
            else 
                out_samples_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_samples_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_samples_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_samples_TREADY, icmp_ln17_reg_220, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln17_reg_220 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln17_reg_220 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_samples_TDATA_blk_n <= out_samples_TREADY;
        else 
            out_samples_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_samples_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_220, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_220 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_220 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_samples_TVALID <= ap_const_logic_1;
        else 
            out_samples_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_0_fu_201_p3 <= (bitcast_ln18_1_fu_197_p1 & bitcast_ln18_fu_193_p1);
    p_s_fu_184_p3 <= (bitcast_ln21_1_fu_180_p1 & bitcast_ln21_fu_176_p1);
    tmp_fu_131_p4 <= ap_sig_allocacmp_i(13 downto 12);
    trunc_ln15_fu_115_p1 <= ap_sig_allocacmp_i(13 - 1 downto 0);
    zext_ln18_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_159_p2),64));
    zext_ln21_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_147_p2),64));
end behav;
