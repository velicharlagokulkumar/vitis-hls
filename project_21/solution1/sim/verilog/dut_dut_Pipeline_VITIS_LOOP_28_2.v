// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_TREADY,
        trunc_ln,
        zext_ln30_1,
        zext_ln30_2,
        zext_ln30_3,
        zext_ln30_4,
        zext_ln30_5,
        zext_ln30_6,
        zext_ln30_7,
        zext_ln30_8,
        output_r_TDATA,
        output_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   output_r_TREADY;
input  [5:0] trunc_ln;
input  [2:0] zext_ln30_1;
input  [3:0] zext_ln30_2;
input  [4:0] zext_ln30_3;
input  [3:0] zext_ln30_4;
input  [5:0] zext_ln30_5;
input  [5:0] zext_ln30_6;
input  [4:0] zext_ln30_7;
input  [3:0] zext_ln30_8;
output  [7:0] output_r_TDATA;
output   output_r_TVALID;

reg ap_idle;
reg output_r_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    output_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [7:0] bundle1_V_fu_229_p10;
reg   [7:0] bundle1_V_reg_266;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] j_V_fu_72;
wire   [3:0] j_V_2_fu_195_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_V_1;
reg    ap_block_pp0_stage0_01001;
wire  signed [5:0] zext_ln30_8_cast_fu_137_p1;
wire  signed [5:0] zext_ln30_7_cast_fu_145_p1;
wire  signed [4:0] zext_ln30_4_cast_fu_161_p1;
wire   [2:0] trunc_ln1514_fu_201_p1;
wire   [5:0] shl_ln_fu_205_p3;
wire   [5:0] add_ln1514_fu_213_p2;
wire   [7:0] bundle1_V_fu_229_p1;
wire   [7:0] bundle1_V_fu_229_p2;
wire   [7:0] bundle1_V_fu_229_p3;
wire   [7:0] bundle1_V_fu_229_p4;
wire   [7:0] bundle1_V_fu_229_p5;
wire   [7:0] bundle1_V_fu_229_p6;
wire   [7:0] bundle1_V_fu_229_p7;
wire   [7:0] bundle1_V_fu_229_p8;
wire   [2:0] bundle1_V_fu_229_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_mux_83_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_83_8_1_1_U1(
    .din0(bundle1_V_fu_229_p1),
    .din1(bundle1_V_fu_229_p2),
    .din2(bundle1_V_fu_229_p3),
    .din3(bundle1_V_fu_229_p4),
    .din4(bundle1_V_fu_229_p5),
    .din5(bundle1_V_fu_229_p6),
    .din6(bundle1_V_fu_229_p7),
    .din7(bundle1_V_fu_229_p8),
    .din8(bundle1_V_fu_229_p9),
    .dout(bundle1_V_fu_229_p10)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_72 <= j_V_2_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_72 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bundle1_V_reg_266 <= bundle1_V_fu_229_p10;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_V_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_V_1 = j_V_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1514_fu_213_p2 = (shl_ln_fu_205_p3 + trunc_ln);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (output_r_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bundle1_V_fu_229_p1 = zext_ln30_1;

assign bundle1_V_fu_229_p2 = zext_ln30_2;

assign bundle1_V_fu_229_p3 = zext_ln30_3;

assign bundle1_V_fu_229_p4 = $unsigned(zext_ln30_4_cast_fu_161_p1);

assign bundle1_V_fu_229_p5 = zext_ln30_5;

assign bundle1_V_fu_229_p6 = zext_ln30_6;

assign bundle1_V_fu_229_p7 = $unsigned(zext_ln30_7_cast_fu_145_p1);

assign bundle1_V_fu_229_p8 = $unsigned(zext_ln30_8_cast_fu_137_p1);

assign bundle1_V_fu_229_p9 = {{add_ln1514_fu_213_p2[5:3]}};

assign icmp_ln1027_fu_189_p2 = ((ap_sig_allocacmp_j_V_1 == 4'd8) ? 1'b1 : 1'b0);

assign j_V_2_fu_195_p2 = (ap_sig_allocacmp_j_V_1 + 4'd1);

assign output_r_TDATA = bundle1_V_reg_266;

assign shl_ln_fu_205_p3 = {{trunc_ln1514_fu_201_p1}, {3'd0}};

assign trunc_ln1514_fu_201_p1 = ap_sig_allocacmp_j_V_1[2:0];

assign zext_ln30_4_cast_fu_161_p1 = $signed(zext_ln30_4);

assign zext_ln30_7_cast_fu_145_p1 = $signed(zext_ln30_7);

assign zext_ln30_8_cast_fu_137_p1 = $signed(zext_ln30_8);

endmodule //dut_dut_Pipeline_VITIS_LOOP_28_2
