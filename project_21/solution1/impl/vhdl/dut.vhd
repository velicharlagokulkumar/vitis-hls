-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_index : IN STD_LOGIC_VECTOR (7 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut_dut,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.128800,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=64,HLS_SYN_LUT=160,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bram1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_0_ce0 : STD_LOGIC;
    signal bram1_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_1_ce0 : STD_LOGIC;
    signal bram1_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_2_ce0 : STD_LOGIC;
    signal bram1_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram1_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_3_ce0 : STD_LOGIC;
    signal bram1_3_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram1_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_4_ce0 : STD_LOGIC;
    signal bram1_4_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram1_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_5_ce0 : STD_LOGIC;
    signal bram1_5_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram1_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_6_ce0 : STD_LOGIC;
    signal bram1_6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram1_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram1_7_ce0 : STD_LOGIC;
    signal bram1_7_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln28_fu_183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln28_reg_203 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram1_0_load_reg_248 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bram1_1_load_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram1_2_load_reg_258 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram1_3_load_reg_263 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram1_4_load_reg_268 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram1_5_load_reg_273 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram1_6_load_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram1_7_load_reg_283 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln30_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1514_fu_187_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dut_Pipeline_VITIS_LOOP_28_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        trunc_ln : IN STD_LOGIC_VECTOR (5 downto 0);
        zext_ln30_1 : IN STD_LOGIC_VECTOR (2 downto 0);
        zext_ln30_2 : IN STD_LOGIC_VECTOR (3 downto 0);
        zext_ln30_3 : IN STD_LOGIC_VECTOR (4 downto 0);
        zext_ln30_4 : IN STD_LOGIC_VECTOR (3 downto 0);
        zext_ln30_5 : IN STD_LOGIC_VECTOR (5 downto 0);
        zext_ln30_6 : IN STD_LOGIC_VECTOR (5 downto 0);
        zext_ln30_7 : IN STD_LOGIC_VECTOR (4 downto 0);
        zext_ln30_8 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_TVALID : OUT STD_LOGIC );
    end component;


    component dut_bram1_0_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component dut_bram1_1_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dut_bram1_2_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component dut_bram1_4_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_bram1_5_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    bram1_0_U : component dut_bram1_0_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_0_address0,
        ce0 => bram1_0_ce0,
        q0 => bram1_0_q0);

    bram1_1_U : component dut_bram1_1_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_1_address0,
        ce0 => bram1_1_ce0,
        q0 => bram1_1_q0);

    bram1_2_U : component dut_bram1_2_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_2_address0,
        ce0 => bram1_2_ce0,
        q0 => bram1_2_q0);

    bram1_3_U : component dut_bram1_1_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_3_address0,
        ce0 => bram1_3_ce0,
        q0 => bram1_3_q0);

    bram1_4_U : component dut_bram1_4_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_4_address0,
        ce0 => bram1_4_ce0,
        q0 => bram1_4_q0);

    bram1_5_U : component dut_bram1_5_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_5_address0,
        ce0 => bram1_5_ce0,
        q0 => bram1_5_q0);

    bram1_6_U : component dut_bram1_2_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_6_address0,
        ce0 => bram1_6_ce0,
        q0 => bram1_6_q0);

    bram1_7_U : component dut_bram1_1_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bram1_7_address0,
        ce0 => bram1_7_ce0,
        q0 => bram1_7_q0);

    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168 : component dut_dut_Pipeline_VITIS_LOOP_28_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start,
        ap_done => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done,
        ap_idle => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_idle,
        ap_ready => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready,
        output_r_TREADY => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY,
        trunc_ln => trunc_ln28_reg_203,
        zext_ln30_1 => bram1_0_load_reg_248,
        zext_ln30_2 => bram1_1_load_reg_253,
        zext_ln30_3 => bram1_2_load_reg_258,
        zext_ln30_4 => bram1_3_load_reg_263,
        zext_ln30_5 => bram1_4_load_reg_268,
        zext_ln30_6 => bram1_5_load_reg_273,
        zext_ln30_7 => bram1_6_load_reg_278,
        zext_ln30_8 => bram1_7_load_reg_283,
        output_r_TDATA => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA,
        output_r_TVALID => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID);

    regslice_both_output_r_U : component dut_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA,
        vld_in => grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bram1_0_load_reg_248 <= bram1_0_q0;
                bram1_1_load_reg_253 <= bram1_1_q0;
                bram1_2_load_reg_258 <= bram1_2_q0;
                bram1_3_load_reg_263 <= bram1_3_q0;
                bram1_4_load_reg_268 <= bram1_4_q0;
                bram1_5_load_reg_273 <= bram1_5_q0;
                bram1_6_load_reg_278 <= bram1_6_q0;
                bram1_7_load_reg_283 <= bram1_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln28_reg_203 <= trunc_ln28_fu_183_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state5, regslice_both_output_r_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (regslice_both_output_r_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done)
    begin
        if ((grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_output_r_U_apdone_blk)
    begin
        if ((regslice_both_output_r_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_output_r_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (regslice_both_output_r_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_output_r_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (regslice_both_output_r_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bram1_0_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_0_ce0 <= ap_const_logic_1;
        else 
            bram1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_1_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_1_ce0 <= ap_const_logic_1;
        else 
            bram1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_2_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_2_ce0 <= ap_const_logic_1;
        else 
            bram1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_3_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_3_ce0 <= ap_const_logic_1;
        else 
            bram1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_4_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_4_ce0 <= ap_const_logic_1;
        else 
            bram1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_5_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_5_ce0 <= ap_const_logic_1;
        else 
            bram1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_6_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_6_ce0 <= ap_const_logic_1;
        else 
            bram1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram1_7_address0 <= zext_ln30_fu_191_p1(3 - 1 downto 0);

    bram1_7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bram1_7_ce0 <= ap_const_logic_1;
        else 
            bram1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start <= grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg;
    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY <= (output_r_TREADY_int_regslice and ap_CS_fsm_state4);
    output_r_TVALID <= regslice_both_output_r_U_vld_out;
    trunc_ln1514_fu_187_p1 <= start_index(3 - 1 downto 0);
    trunc_ln28_fu_183_p1 <= start_index(6 - 1 downto 0);
    zext_ln30_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1514_fu_187_p1),64));
end behav;
