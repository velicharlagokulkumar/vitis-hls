// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut_dut,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.128800,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=64,HLS_SYN_LUT=160,HLS_VERSION=2022_2}" *)

module dut (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        start_index,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] start_index;
output  [7:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] bram1_0_address0;
reg    bram1_0_ce0;
wire   [2:0] bram1_0_q0;
wire   [2:0] bram1_1_address0;
reg    bram1_1_ce0;
wire   [3:0] bram1_1_q0;
wire   [2:0] bram1_2_address0;
reg    bram1_2_ce0;
wire   [4:0] bram1_2_q0;
wire   [2:0] bram1_3_address0;
reg    bram1_3_ce0;
wire   [3:0] bram1_3_q0;
wire   [2:0] bram1_4_address0;
reg    bram1_4_ce0;
wire   [5:0] bram1_4_q0;
wire   [2:0] bram1_5_address0;
reg    bram1_5_ce0;
wire   [5:0] bram1_5_q0;
wire   [2:0] bram1_6_address0;
reg    bram1_6_ce0;
wire   [4:0] bram1_6_q0;
wire   [2:0] bram1_7_address0;
reg    bram1_7_ce0;
wire   [3:0] bram1_7_q0;
wire   [5:0] trunc_ln28_fu_183_p1;
reg   [5:0] trunc_ln28_reg_203;
reg   [2:0] bram1_0_load_reg_248;
wire    ap_CS_fsm_state2;
reg   [3:0] bram1_1_load_reg_253;
reg   [4:0] bram1_2_load_reg_258;
reg   [3:0] bram1_3_load_reg_263;
reg   [5:0] bram1_4_load_reg_268;
reg   [5:0] bram1_5_load_reg_273;
reg   [4:0] bram1_6_load_reg_278;
reg   [3:0] bram1_7_load_reg_283;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_idle;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY;
wire   [7:0] grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA;
wire    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID;
reg    grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln30_fu_191_p1;
wire   [2:0] trunc_ln1514_fu_187_p1;
wire    ap_CS_fsm_state5;
wire    regslice_both_output_r_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg = 1'b0;
end

dut_bram1_0_RAM_1P_BRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_0_address0),
    .ce0(bram1_0_ce0),
    .q0(bram1_0_q0)
);

dut_bram1_1_RAM_1P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_1_address0),
    .ce0(bram1_1_ce0),
    .q0(bram1_1_q0)
);

dut_bram1_2_RAM_1P_BRAM_1R1W #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_2_address0),
    .ce0(bram1_2_ce0),
    .q0(bram1_2_q0)
);

dut_bram1_1_RAM_1P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_3_address0),
    .ce0(bram1_3_ce0),
    .q0(bram1_3_q0)
);

dut_bram1_4_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_4_address0),
    .ce0(bram1_4_ce0),
    .q0(bram1_4_q0)
);

dut_bram1_5_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_5_address0),
    .ce0(bram1_5_ce0),
    .q0(bram1_5_q0)
);

dut_bram1_2_RAM_1P_BRAM_1R1W #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_6_address0),
    .ce0(bram1_6_ce0),
    .q0(bram1_6_q0)
);

dut_bram1_1_RAM_1P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_7_address0),
    .ce0(bram1_7_ce0),
    .q0(bram1_7_q0)
);

dut_dut_Pipeline_VITIS_LOOP_28_2 grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start),
    .ap_done(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done),
    .ap_idle(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_idle),
    .ap_ready(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready),
    .output_r_TREADY(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY),
    .trunc_ln(trunc_ln28_reg_203),
    .zext_ln30_1(bram1_0_load_reg_248),
    .zext_ln30_2(bram1_1_load_reg_253),
    .zext_ln30_3(bram1_2_load_reg_258),
    .zext_ln30_4(bram1_3_load_reg_263),
    .zext_ln30_5(bram1_4_load_reg_268),
    .zext_ln30_6(bram1_5_load_reg_273),
    .zext_ln30_7(bram1_6_load_reg_278),
    .zext_ln30_8(bram1_7_load_reg_283),
    .output_r_TDATA(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA),
    .output_r_TVALID(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID)
);

dut_regslice_both #(
    .DataWidth( 8 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TDATA),
    .vld_in(grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TVALID),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_ready == 1'b1)) begin
            grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bram1_0_load_reg_248 <= bram1_0_q0;
        bram1_1_load_reg_253 <= bram1_1_q0;
        bram1_2_load_reg_258 <= bram1_2_q0;
        bram1_3_load_reg_263 <= bram1_3_q0;
        bram1_4_load_reg_268 <= bram1_4_q0;
        bram1_5_load_reg_273 <= bram1_5_q0;
        bram1_6_load_reg_278 <= bram1_6_q0;
        bram1_7_load_reg_283 <= bram1_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln28_reg_203 <= trunc_ln28_fu_183_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_output_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_0_ce0 = 1'b1;
    end else begin
        bram1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_1_ce0 = 1'b1;
    end else begin
        bram1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_2_ce0 = 1'b1;
    end else begin
        bram1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_3_ce0 = 1'b1;
    end else begin
        bram1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_4_ce0 = 1'b1;
    end else begin
        bram1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_5_ce0 = 1'b1;
    end else begin
        bram1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_6_ce0 = 1'b1;
    end else begin
        bram1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bram1_7_ce0 = 1'b1;
    end else begin
        bram1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bram1_0_address0 = zext_ln30_fu_191_p1;

assign bram1_1_address0 = zext_ln30_fu_191_p1;

assign bram1_2_address0 = zext_ln30_fu_191_p1;

assign bram1_3_address0 = zext_ln30_fu_191_p1;

assign bram1_4_address0 = zext_ln30_fu_191_p1;

assign bram1_5_address0 = zext_ln30_fu_191_p1;

assign bram1_6_address0 = zext_ln30_fu_191_p1;

assign bram1_7_address0 = zext_ln30_fu_191_p1;

assign grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start = grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_ap_start_reg;

assign grp_dut_Pipeline_VITIS_LOOP_28_2_fu_168_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state4);

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign trunc_ln1514_fu_187_p1 = start_index[2:0];

assign trunc_ln28_fu_183_p1 = start_index[5:0];

assign zext_ln30_fu_191_p1 = trunc_ln1514_fu_187_p1;

endmodule //dut
