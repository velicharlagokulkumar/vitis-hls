// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut_dut,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.557800,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=339,HLS_VERSION=2022_2}" *)

module dut (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        start_index,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] start_index;
output  [7:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] trunc_ln33_fu_128_p1;
reg   [5:0] trunc_ln33_reg_136;
wire   [2:0] trunc_ln1495_fu_132_p1;
reg   [2:0] trunc_ln1495_reg_142;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_done;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_idle;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_ready;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TREADY;
wire   [7:0] grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TDATA;
wire    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TVALID;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_done;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_idle;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_ready;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TREADY;
wire   [7:0] grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TDATA;
wire    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TVALID;
reg    grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    regslice_both_output_r_U_apdone_blk;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg   [7:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg = 1'b0;
#0 grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg = 1'b0;
end

dut_dut_Pipeline_VITIS_LOOP_33_2 grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start),
    .ap_done(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_done),
    .ap_idle(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_idle),
    .ap_ready(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_ready),
    .output_r_TREADY(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TREADY),
    .trunc_ln(trunc_ln33_reg_136),
    .trunc_ln1(trunc_ln1495_reg_142),
    .output_r_TDATA(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TDATA),
    .output_r_TVALID(grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TVALID)
);

dut_dut_Pipeline_VITIS_LOOP_38_3 grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start),
    .ap_done(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_done),
    .ap_idle(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_idle),
    .ap_ready(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_ready),
    .output_r_TREADY(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TREADY),
    .trunc_ln(trunc_ln33_reg_136),
    .trunc_ln1(trunc_ln1495_reg_142),
    .output_r_TDATA(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TDATA),
    .output_r_TVALID(grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TVALID)
);

dut_regslice_both #(
    .DataWidth( 8 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_ready == 1'b1)) begin
            grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg <= 1'b1;
        end else if ((grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_ready == 1'b1)) begin
            grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln1495_reg_142 <= trunc_ln1495_fu_132_p1;
        trunc_ln33_reg_136 <= trunc_ln33_fu_128_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_output_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_output_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_output_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_TDATA_int_regslice = grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TDATA;
    end else if (((grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_TDATA_int_regslice = grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TDATA;
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_TVALID_int_regslice = grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_TVALID_int_regslice = grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TVALID;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_output_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start = grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_ap_start_reg;

assign grp_dut_Pipeline_VITIS_LOOP_33_2_fu_80_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start = grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_ap_start_reg;

assign grp_dut_Pipeline_VITIS_LOOP_38_3_fu_104_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state6);

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign trunc_ln1495_fu_132_p1 = start_index[2:0];

assign trunc_ln33_fu_128_p1 = start_index[5:0];

endmodule //dut
