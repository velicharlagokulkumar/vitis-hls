// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut_dut,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.557800,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=12,HLS_SYN_LUT=142,HLS_VERSION=2022_2}" *)

module dut (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_TREADY,
        start_index,
        output_r_TDATA,
        output_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   output_r_TREADY;
input  [7:0] start_index;
output  [7:0] output_r_TDATA;
output   output_r_TVALID;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_output_r_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_217_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
wire   [2:0] bram1_0_address0;
reg    bram1_0_ce0;
wire   [5:0] bram1_0_q0;
wire   [2:0] bram1_1_address0;
reg    bram1_1_ce0;
wire   [5:0] bram1_1_q0;
wire   [2:0] bram1_2_address0;
reg    bram1_2_ce0;
wire   [5:0] bram1_2_q0;
wire   [2:0] bram1_3_address0;
reg    bram1_3_ce0;
wire   [5:0] bram1_3_q0;
wire   [2:0] bram1_4_address0;
reg    bram1_4_ce0;
wire   [5:0] bram1_4_q0;
wire   [2:0] bram1_5_address0;
reg    bram1_5_ce0;
wire   [5:0] bram1_5_q0;
wire   [2:0] bram1_6_address0;
reg    bram1_6_ce0;
wire   [5:0] bram1_6_q0;
wire   [2:0] bram1_7_address0;
reg    bram1_7_ce0;
wire   [5:0] bram1_7_q0;
reg    output_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln30_fu_265_p2;
reg   [2:0] add_ln30_reg_353;
wire   [63:0] zext_ln30_fu_253_p1;
reg   [3:0] rhs_fu_80;
wire   [3:0] j_V_fu_223_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_V_1;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] zext_ln1495_fu_229_p1;
wire   [5:0] trunc_ln1495_fu_201_p1;
wire   [5:0] ret_V_fu_237_p2;
wire   [2:0] trunc_ln1_fu_243_p4;
wire   [2:0] trunc_ln1495_2_fu_233_p1;
wire   [2:0] trunc_ln1495_1_fu_205_p1;
wire   [5:0] bundle1_V_fu_276_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
reg    ap_condition_172;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_bram1_0_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_0_address0),
    .ce0(bram1_0_ce0),
    .q0(bram1_0_q0)
);

dut_bram1_1_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_1_address0),
    .ce0(bram1_1_ce0),
    .q0(bram1_1_q0)
);

dut_bram1_2_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_2_address0),
    .ce0(bram1_2_ce0),
    .q0(bram1_2_q0)
);

dut_bram1_3_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_3_address0),
    .ce0(bram1_3_ce0),
    .q0(bram1_3_q0)
);

dut_bram1_4_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_4_address0),
    .ce0(bram1_4_ce0),
    .q0(bram1_4_q0)
);

dut_bram1_5_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_5_address0),
    .ce0(bram1_5_ce0),
    .q0(bram1_5_q0)
);

dut_bram1_6_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_6_address0),
    .ce0(bram1_6_ce0),
    .q0(bram1_6_q0)
);

dut_bram1_7_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram1_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bram1_7_address0),
    .ce0(bram1_7_ce0),
    .q0(bram1_7_q0)
);

dut_mux_83_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 6 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mux_83_6_1_1_U1(
    .din0(bram1_0_q0),
    .din1(bram1_1_q0),
    .din2(bram1_2_q0),
    .din3(bram1_3_q0),
    .din4(bram1_4_q0),
    .din5(bram1_5_q0),
    .din6(bram1_6_q0),
    .din7(bram1_7_q0),
    .din8(add_ln30_reg_353),
    .dout(bundle1_V_fu_276_p10)
);

dut_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

dut_regslice_both #(
    .DataWidth( 8 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_172)) begin
        if ((icmp_ln1027_fu_217_p2 == 1'd0)) begin
            rhs_fu_80 <= j_V_fu_223_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            rhs_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_217_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_reg_353 <= add_ln30_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_217_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_V_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_V_1 = rhs_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_0_ce0 = 1'b1;
    end else begin
        bram1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_1_ce0 = 1'b1;
    end else begin
        bram1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_2_ce0 = 1'b1;
    end else begin
        bram1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_3_ce0 = 1'b1;
    end else begin
        bram1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_4_ce0 = 1'b1;
    end else begin
        bram1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_5_ce0 = 1'b1;
    end else begin
        bram1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_6_ce0 = 1'b1;
    end else begin
        bram1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bram1_7_ce0 = 1'b1;
    end else begin
        bram1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_265_p2 = (trunc_ln1495_2_fu_233_p1 + trunc_ln1495_1_fu_205_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_output_r_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_output_r_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_output_r_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_output_r_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_output_r_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_output_r_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_output_r_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (output_r_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_172 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bram1_0_address0 = zext_ln30_fu_253_p1;

assign bram1_1_address0 = zext_ln30_fu_253_p1;

assign bram1_2_address0 = zext_ln30_fu_253_p1;

assign bram1_3_address0 = zext_ln30_fu_253_p1;

assign bram1_4_address0 = zext_ln30_fu_253_p1;

assign bram1_5_address0 = zext_ln30_fu_253_p1;

assign bram1_6_address0 = zext_ln30_fu_253_p1;

assign bram1_7_address0 = zext_ln30_fu_253_p1;

assign icmp_ln1027_fu_217_p2 = ((ap_sig_allocacmp_j_V_1 == 4'd8) ? 1'b1 : 1'b0);

assign j_V_fu_223_p2 = (ap_sig_allocacmp_j_V_1 + 4'd1);

assign output_r_TDATA_int_regslice = bundle1_V_fu_276_p10;

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign ret_V_fu_237_p2 = (zext_ln1495_fu_229_p1 + trunc_ln1495_fu_201_p1);

assign trunc_ln1495_1_fu_205_p1 = start_index[2:0];

assign trunc_ln1495_2_fu_233_p1 = ap_sig_allocacmp_j_V_1[2:0];

assign trunc_ln1495_fu_201_p1 = start_index[5:0];

assign trunc_ln1_fu_243_p4 = {{ret_V_fu_237_p2[5:3]}};

assign zext_ln1495_fu_229_p1 = ap_sig_allocacmp_j_V_1;

assign zext_ln30_fu_253_p1 = trunc_ln1_fu_243_p4;

endmodule //dut
