// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.540000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=318,HLS_SYN_LUT=288,HLS_VERSION=2022_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [47:0] y;
output   y_ap_vld;
output  [1:0] c_address0;
output   c_ce0;
input  [23:0] c_q0;
input  [23:0] x;

reg ap_idle;
reg y_ap_vld;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_122_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [23:0] shift_reg_V_0;
reg   [23:0] shift_reg_V_2;
reg   [23:0] shift_reg_V_1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_262;
reg   [0:0] tmp_reg_262_pp0_iter1_reg;
wire   [0:0] icmp_ln12_fu_135_p2;
reg   [0:0] icmp_ln12_reg_266;
wire   [1:0] trunc_ln16_fu_141_p1;
reg   [1:0] trunc_ln16_reg_270;
wire   [23:0] data_V_fu_192_p3;
reg  signed [23:0] c_load_reg_286;
wire   [47:0] r_V_1_fu_219_p2;
reg   [47:0] r_V_1_reg_291;
wire   [23:0] ap_phi_reg_pp0_iter0_data_V_2_reg_100;
reg   [23:0] ap_phi_reg_pp0_iter1_data_V_2_reg_100;
reg  signed [23:0] ap_phi_reg_pp0_iter2_data_V_2_reg_100;
wire   [63:0] i_cast_fu_130_p1;
wire    ap_block_pp0_stage0;
reg   [47:0] acc_V_fu_66;
wire   [47:0] acc_V_1_fu_228_p2;
reg   [47:0] ap_sig_allocacmp_acc_V_load_1;
wire    ap_loop_init;
reg   [2:0] i_fu_70;
wire   [2:0] add_ln11_fu_151_p2;
reg   [2:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln16_fu_174_p2;
wire   [0:0] icmp_ln16_1_fu_187_p2;
wire   [23:0] select_ln16_fu_179_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_154;
reg    ap_condition_111;
reg    ap_condition_115;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 shift_reg_V_0 = 24'd0;
#0 shift_reg_V_2 = 24'd0;
#0 shift_reg_V_1 = 24'd0;
#0 ap_done_reg = 1'b0;
end

fir_mul_24s_24s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 48 ))
mul_24s_24s_48_1_1_U1(
    .din0(c_load_reg_286),
    .din1(ap_phi_reg_pp0_iter2_data_V_2_reg_100),
    .dout(r_V_1_fu_219_p2)
);

fir_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_154)) begin
            acc_V_fu_66 <= 48'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            acc_V_fu_66 <= acc_V_1_fu_228_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if (((icmp_ln12_fu_135_p2 == 1'd1) & (tmp_fu_122_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_data_V_2_reg_100 <= x;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_data_V_2_reg_100 <= ap_phi_reg_pp0_iter0_data_V_2_reg_100;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_115)) begin
        if (((icmp_ln12_reg_266 == 1'd0) & (tmp_reg_262 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_data_V_2_reg_100 <= data_V_fu_192_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_data_V_2_reg_100 <= ap_phi_reg_pp0_iter1_data_V_2_reg_100;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if ((tmp_fu_122_p3 == 1'd0)) begin
            i_fu_70 <= add_ln11_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 3'd3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        c_load_reg_286 <= c_q0;
        tmp_reg_262 <= ap_sig_allocacmp_i_1[32'd2];
        tmp_reg_262_pp0_iter1_reg <= tmp_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_122_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_266 <= icmp_ln12_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        r_V_1_reg_291 <= r_V_1_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_135_p2 == 1'd1) & (tmp_fu_122_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_0 <= x;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln16_reg_270 == 2'd1) & (icmp_ln12_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_1 <= data_V_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln16_reg_270 == 2'd2) & (icmp_ln12_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_2 <= data_V_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_135_p2 == 1'd0) & (tmp_fu_122_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln16_reg_270 <= trunc_ln16_fu_141_p1;
    end
end

always @ (*) begin
    if (((tmp_fu_122_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_acc_V_load_1 = acc_V_1_fu_228_p2;
    end else begin
        ap_sig_allocacmp_acc_V_load_1 = acc_V_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 3'd3;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_262_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_1_fu_228_p2 = (r_V_1_reg_291 + acc_V_fu_66);

assign add_ln11_fu_151_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(3'd7));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_111 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_115 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_154 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_data_V_2_reg_100 = 'bx;

assign c_address0 = i_cast_fu_130_p1;

assign data_V_fu_192_p3 = ((icmp_ln16_1_fu_187_p2[0:0] == 1'b1) ? shift_reg_V_1 : select_ln16_fu_179_p3);

assign i_cast_fu_130_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln12_fu_135_p2 = ((ap_sig_allocacmp_i_1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_187_p2 = ((trunc_ln16_reg_270 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_174_p2 = ((trunc_ln16_reg_270 == 2'd1) ? 1'b1 : 1'b0);

assign select_ln16_fu_179_p3 = ((icmp_ln16_fu_174_p2[0:0] == 1'b1) ? shift_reg_V_0 : shift_reg_V_2);

assign tmp_fu_122_p3 = ap_sig_allocacmp_i_1[32'd2];

assign trunc_ln16_fu_141_p1 = ap_sig_allocacmp_i_1[1:0];

assign y = ap_sig_allocacmp_acc_V_load_1;

endmodule //fir
