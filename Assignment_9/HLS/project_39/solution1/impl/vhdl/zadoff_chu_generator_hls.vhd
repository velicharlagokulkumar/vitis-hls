-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zadoff_chu_generator_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    length_r : IN STD_LOGIC_VECTOR (31 downto 0);
    u : IN STD_LOGIC_VECTOR (31 downto 0);
    tlast_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    tlast_TVALID : OUT STD_LOGIC;
    tlast_TREADY : IN STD_LOGIC );
end;


architecture behav of zadoff_chu_generator_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "zadoff_chu_generator_hls_zadoff_chu_generator_hls,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.042000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4732,HLS_SYN_LUT=6133,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tlast_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_reg_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv5_reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_idle : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_ready : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TREADY : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TVALID : STD_LOGIC;
    signal grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component zadoff_chu_generator_hls_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        length_r : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3 : IN STD_LOGIC_VECTOR (63 downto 0);
        conv5 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_stream_TVALID : OUT STD_LOGIC );
    end component;


    component zadoff_chu_generator_hls_sitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64 : component zadoff_chu_generator_hls_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start,
        ap_done => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done,
        ap_idle => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_idle,
        ap_ready => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_ready,
        out_stream_TREADY => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TREADY,
        length_r => length_r,
        conv3 => conv3_reg_100,
        conv5 => conv5_reg_105,
        out_stream_TDATA => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TDATA,
        out_stream_TVALID => grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TVALID);

    sitodp_32ns_64_4_no_dsp_1_U38 : component zadoff_chu_generator_hls_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => u,
        ce => ap_const_logic_1,
        dout => grp_fu_81_p1);

    sitodp_32ns_64_4_no_dsp_1_U39 : component zadoff_chu_generator_hls_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => length_r,
        ce => ap_const_logic_1,
        dout => grp_fu_85_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv3_reg_100 <= grp_fu_81_p1;
                conv5_reg_105 <= grp_fu_85_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tlast_TREADY, ap_CS_fsm_state7, grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tlast_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done)
    begin
        if ((grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(tlast_TREADY)
    begin
        if ((tlast_TREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(tlast_TREADY, ap_CS_fsm_state7)
    begin
        if (((tlast_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tlast_TREADY, ap_CS_fsm_state7)
    begin
        if (((tlast_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start <= grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_ap_start_reg;
    grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TREADY <= (out_stream_TREADY and ap_CS_fsm_state6);
    out_stream_TDATA <= grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TDATA;
    out_stream_TVALID <= grp_zadoff_chu_generator_hls_Pipeline_VITIS_LOOP_12_1_fu_64_out_stream_TVALID;
    tlast_TDATA <= ap_const_lv8_1;

    tlast_TDATA_blk_n_assign_proc : process(tlast_TREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tlast_TDATA_blk_n <= tlast_TREADY;
        else 
            tlast_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tlast_TVALID_assign_proc : process(tlast_TREADY, ap_CS_fsm_state7)
    begin
        if (((tlast_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            tlast_TVALID <= ap_const_logic_1;
        else 
            tlast_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
