-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zadoff_chu_generator_hls_sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of zadoff_chu_generator_hls_sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal do_cos_read_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal do_cos_read_reg_1170_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1170_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1178_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1178_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1178_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1178_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_V_fu_252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_V_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_V_reg_1184_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_V_reg_1184_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal closepath_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1191_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1191_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_272_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_18_reg_1198 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_18_reg_1198_pp0_iter1_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln628_fu_305_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln628_reg_1208 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1019_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1213_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Med_V_reg_1219 : STD_LOGIC_VECTOR (79 downto 0);
    signal k_V_reg_1224 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_V_3_fu_395_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_V_3_reg_1229 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_fu_451_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_reg_1234 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_V_1_fu_467_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_1_reg_1240 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_1_reg_1240_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_V_fu_484_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246_pp0_iter4_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246_pp0_iter5_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246_pp0_iter6_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246_pp0_iter7_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1246_pp0_iter8_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_V_3_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1251_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_554_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1256 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1256_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1256_pp0_iter5_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_reg_1261 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1261_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1271_fu_578_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln1019_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1272_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1278_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1286_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1286_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1286_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1286_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1307 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1307_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1307_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1307_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1307_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1313_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1313_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1313_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1313_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t1_V_reg_1323 : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_V_reg_1323_pp0_iter7_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_V_reg_1323_pp0_iter8_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_1_reg_1328 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_1_reg_1328_pp0_iter7_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_1_reg_1328_pp0_iter8_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal result_V_reg_1338 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_2_reg_1344 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1349 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln541_1_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln541_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln214_fu_276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_282_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_290_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal din_sig_V_fu_262_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln930_fu_315_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_8_fu_318_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_19_fu_334_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_345_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_345_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1027_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_fu_350_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_s_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_389_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_6_fu_403_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_20_fu_413_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_2_fu_421_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_21_fu_431_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1198_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_assign_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_V_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1454_fu_476_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_fu_479_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1535_fu_500_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1512_fu_512_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_518_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1488_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1512_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1488_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1513_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_trunc_fu_568_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_592_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_27_fu_647_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_653_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_691_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln307_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_2_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_squared_fu_770_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1156_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal B_squared_fu_770_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_800_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_2_fu_800_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1163_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln813_fu_835_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln813_1_fu_838_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_2_fu_826_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_1_fu_841_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1347_fu_847_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_2_fu_851_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_V_1_fu_820_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_6_fu_865_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_6_fu_865_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal Ex_V_4_fu_901_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_23_fu_911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_925_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_24_fu_918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_fu_943_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_1_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_935_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_1_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_2_fu_953_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_970_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln1488_2_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln319_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln186_fu_907_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln329_fu_1004_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln329_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1020_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1454_2_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1039_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_fu_1049_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln335_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_1078_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1067_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln288_fu_1071_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_exp_V_1_fu_1090_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln300_1_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_1059_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln300_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_3_fu_1115_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln300_fu_1127_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_exp_V_fu_1098_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_V_fu_1135_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_28_fu_1143_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1156_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1156_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1163_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1156_ce : STD_LOGIC;
    signal grp_fu_1163_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1163_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_2_fu_800_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_6_fu_865_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal ret_V_fu_345_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component zadoff_chu_generator_hls_mul_80s_24ns_80_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mul_23s_22ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mul_30s_29ns_58_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mul_mul_15ns_15ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component zadoff_chu_generator_hls_mul_mul_15ns_15s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component zadoff_chu_generator_hls_sin_or_cos_float_s_ref_4oPi_table_100_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K0_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K1_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K2_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component zadoff_chu_generator_hls_sin_or_cos_float_s_ref_4oPi_table_100_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_sin_cos_K0_V_U : component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K0_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K0_V_address0,
        ce0 => second_order_float_sin_cos_K0_V_ce0,
        q0 => second_order_float_sin_cos_K0_V_q0);

    second_order_float_sin_cos_K1_V_U : component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K1_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K1_V_address0,
        ce0 => second_order_float_sin_cos_K1_V_ce0,
        q0 => second_order_float_sin_cos_K1_V_q0);

    second_order_float_sin_cos_K2_V_U : component zadoff_chu_generator_hls_sin_or_cos_float_s_second_order_float_sin_cos_K2_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K2_V_address0,
        ce0 => second_order_float_sin_cos_K2_V_ce0,
        q0 => second_order_float_sin_cos_K2_V_q0);

    mul_80s_24ns_80_1_1_U1 : component zadoff_chu_generator_hls_mul_80s_24ns_80_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 80)
    port map (
        din0 => Med_V_reg_1219,
        din1 => ret_V_fu_345_p1,
        dout => ret_V_fu_345_p2);

    mux_83_1_1_1_U2 : component zadoff_chu_generator_hls_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => k_V_1_reg_1240_pp0_iter4_reg,
        dout => tmp_s_fu_592_p10);

    mux_164_1_1_1_U3 : component zadoff_chu_generator_hls_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_27_fu_647_p3,
        dout => tmp_4_fu_653_p18);

    mux_164_1_1_1_U4 : component zadoff_chu_generator_hls_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_27_fu_647_p3,
        dout => tmp_5_fu_691_p18);

    mul_23s_22ns_45_1_1_U5 : component zadoff_chu_generator_hls_mul_23s_22ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 22,
        dout_WIDTH => 45)
    port map (
        din0 => second_order_float_sin_cos_K1_V_q0,
        din1 => r_V_2_fu_800_p1,
        dout => r_V_2_fu_800_p2);

    mul_30s_29ns_58_1_1_U6 : component zadoff_chu_generator_hls_mul_30s_29ns_58_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        din0 => ret_V_2_fu_851_p2,
        din1 => r_V_6_fu_865_p1,
        dout => r_V_6_fu_865_p2);

    mul_mul_15ns_15ns_30_4_1_U7 : component zadoff_chu_generator_hls_mul_mul_15ns_15ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1156_p0,
        din1 => grp_fu_1156_p1,
        ce => grp_fu_1156_ce,
        dout => grp_fu_1156_p2);

    mul_mul_15ns_15s_30_4_1_U8 : component zadoff_chu_generator_hls_mul_mul_15ns_15s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1163_p0,
        din1 => second_order_float_sin_cos_K2_V_q0,
        ce => grp_fu_1163_ce,
        dout => grp_fu_1163_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                B_reg_1256 <= B_fu_554_p1;
                B_reg_1256_pp0_iter4_reg <= B_reg_1256;
                B_reg_1256_pp0_iter5_reg <= B_reg_1256_pp0_iter4_reg;
                Ex_V_3_reg_1251 <= Ex_V_3_fu_494_p2;
                Ex_V_3_reg_1251_pp0_iter4_reg <= Ex_V_3_reg_1251;
                Ex_V_3_reg_1251_pp0_iter5_reg <= Ex_V_3_reg_1251_pp0_iter4_reg;
                Ex_V_3_reg_1251_pp0_iter6_reg <= Ex_V_3_reg_1251_pp0_iter5_reg;
                Ex_V_3_reg_1251_pp0_iter7_reg <= Ex_V_3_reg_1251_pp0_iter6_reg;
                Ex_V_3_reg_1251_pp0_iter8_reg <= Ex_V_3_reg_1251_pp0_iter7_reg;
                Ex_V_3_reg_1251_pp0_iter9_reg <= Ex_V_3_reg_1251_pp0_iter8_reg;
                Mx_V_reg_1246 <= r_fu_479_p2(57 downto 29);
                Mx_V_reg_1246_pp0_iter4_reg <= Mx_V_reg_1246;
                Mx_V_reg_1246_pp0_iter5_reg <= Mx_V_reg_1246_pp0_iter4_reg;
                Mx_V_reg_1246_pp0_iter6_reg <= Mx_V_reg_1246_pp0_iter5_reg;
                Mx_V_reg_1246_pp0_iter7_reg <= Mx_V_reg_1246_pp0_iter6_reg;
                Mx_V_reg_1246_pp0_iter8_reg <= Mx_V_reg_1246_pp0_iter7_reg;
                Mx_bits_V_3_reg_1229 <= Mx_bits_V_3_fu_395_p3;
                Mx_zeros_reg_1234 <= Mx_zeros_fu_451_p1;
                and_ln300_reg_1307 <= and_ln300_fu_737_p2;
                and_ln300_reg_1307_pp0_iter6_reg <= and_ln300_reg_1307;
                and_ln300_reg_1307_pp0_iter7_reg <= and_ln300_reg_1307_pp0_iter6_reg;
                and_ln300_reg_1307_pp0_iter8_reg <= and_ln300_reg_1307_pp0_iter7_reg;
                and_ln300_reg_1307_pp0_iter9_reg <= and_ln300_reg_1307_pp0_iter8_reg;
                closepath_reg_1191_pp0_iter2_reg <= closepath_reg_1191_pp0_iter1_reg;
                cos_basis_reg_1286 <= cos_basis_fu_619_p3;
                cos_basis_reg_1286_pp0_iter6_reg <= cos_basis_reg_1286;
                cos_basis_reg_1286_pp0_iter7_reg <= cos_basis_reg_1286_pp0_iter6_reg;
                cos_basis_reg_1286_pp0_iter8_reg <= cos_basis_reg_1286_pp0_iter7_reg;
                cos_basis_reg_1286_pp0_iter9_reg <= cos_basis_reg_1286_pp0_iter8_reg;
                din_exp_V_reg_1184_pp0_iter2_reg <= din_exp_V_reg_1184_pp0_iter1_reg;
                do_cos_read_reg_1170_pp0_iter2_reg <= do_cos_read_reg_1170_pp0_iter1_reg;
                do_cos_read_reg_1170_pp0_iter3_reg <= do_cos_read_reg_1170_pp0_iter2_reg;
                do_cos_read_reg_1170_pp0_iter4_reg <= do_cos_read_reg_1170_pp0_iter3_reg;
                do_cos_read_reg_1170_pp0_iter5_reg <= do_cos_read_reg_1170_pp0_iter4_reg;
                do_cos_read_reg_1170_pp0_iter6_reg <= do_cos_read_reg_1170_pp0_iter5_reg;
                do_cos_read_reg_1170_pp0_iter7_reg <= do_cos_read_reg_1170_pp0_iter6_reg;
                do_cos_read_reg_1170_pp0_iter8_reg <= do_cos_read_reg_1170_pp0_iter7_reg;
                do_cos_read_reg_1170_pp0_iter9_reg <= do_cos_read_reg_1170_pp0_iter8_reg;
                icmp_ln1019_1_reg_1213_pp0_iter2_reg <= icmp_ln1019_1_reg_1213_pp0_iter1_reg;
                icmp_ln1019_1_reg_1213_pp0_iter3_reg <= icmp_ln1019_1_reg_1213_pp0_iter2_reg;
                icmp_ln1019_1_reg_1213_pp0_iter4_reg <= icmp_ln1019_1_reg_1213_pp0_iter3_reg;
                icmp_ln1019_1_reg_1213_pp0_iter5_reg <= icmp_ln1019_1_reg_1213_pp0_iter4_reg;
                icmp_ln1019_1_reg_1213_pp0_iter6_reg <= icmp_ln1019_1_reg_1213_pp0_iter5_reg;
                icmp_ln1019_1_reg_1213_pp0_iter7_reg <= icmp_ln1019_1_reg_1213_pp0_iter6_reg;
                icmp_ln1019_1_reg_1213_pp0_iter8_reg <= icmp_ln1019_1_reg_1213_pp0_iter7_reg;
                icmp_ln1019_1_reg_1213_pp0_iter9_reg <= icmp_ln1019_1_reg_1213_pp0_iter8_reg;
                icmp_ln1019_2_reg_1278 <= icmp_ln1019_2_fu_587_p2;
                icmp_ln1019_2_reg_1278_pp0_iter4_reg <= icmp_ln1019_2_reg_1278;
                icmp_ln1019_2_reg_1278_pp0_iter5_reg <= icmp_ln1019_2_reg_1278_pp0_iter4_reg;
                icmp_ln1019_2_reg_1278_pp0_iter6_reg <= icmp_ln1019_2_reg_1278_pp0_iter5_reg;
                icmp_ln1019_2_reg_1278_pp0_iter7_reg <= icmp_ln1019_2_reg_1278_pp0_iter6_reg;
                icmp_ln1019_2_reg_1278_pp0_iter8_reg <= icmp_ln1019_2_reg_1278_pp0_iter7_reg;
                icmp_ln1019_2_reg_1278_pp0_iter9_reg <= icmp_ln1019_2_reg_1278_pp0_iter8_reg;
                icmp_ln1019_reg_1272 <= icmp_ln1019_fu_582_p2;
                icmp_ln1019_reg_1272_pp0_iter4_reg <= icmp_ln1019_reg_1272;
                icmp_ln1019_reg_1272_pp0_iter5_reg <= icmp_ln1019_reg_1272_pp0_iter4_reg;
                icmp_ln1019_reg_1272_pp0_iter6_reg <= icmp_ln1019_reg_1272_pp0_iter5_reg;
                icmp_ln1019_reg_1272_pp0_iter7_reg <= icmp_ln1019_reg_1272_pp0_iter6_reg;
                icmp_ln1019_reg_1272_pp0_iter8_reg <= icmp_ln1019_reg_1272_pp0_iter7_reg;
                icmp_ln1019_reg_1272_pp0_iter9_reg <= icmp_ln1019_reg_1272_pp0_iter8_reg;
                k_V_1_reg_1240 <= k_V_1_fu_467_p3;
                k_V_1_reg_1240_pp0_iter4_reg <= k_V_1_reg_1240;
                p_Result_17_reg_1178_pp0_iter2_reg <= p_Result_17_reg_1178_pp0_iter1_reg;
                p_Result_17_reg_1178_pp0_iter3_reg <= p_Result_17_reg_1178_pp0_iter2_reg;
                p_Result_17_reg_1178_pp0_iter4_reg <= p_Result_17_reg_1178_pp0_iter3_reg;
                result_V_reg_1338 <= r_V_6_fu_865_p2(57 downto 29);
                results_sign_V_4_reg_1313 <= results_sign_V_4_fu_762_p3;
                results_sign_V_4_reg_1313_pp0_iter6_reg <= results_sign_V_4_reg_1313;
                results_sign_V_4_reg_1313_pp0_iter7_reg <= results_sign_V_4_reg_1313_pp0_iter6_reg;
                results_sign_V_4_reg_1313_pp0_iter8_reg <= results_sign_V_4_reg_1313_pp0_iter7_reg;
                results_sign_V_4_reg_1313_pp0_iter9_reg <= results_sign_V_4_reg_1313_pp0_iter8_reg;
                rhs_1_reg_1328 <= r_V_2_fu_800_p2(44 downto 23);
                rhs_1_reg_1328_pp0_iter7_reg <= rhs_1_reg_1328;
                rhs_1_reg_1328_pp0_iter8_reg <= rhs_1_reg_1328_pp0_iter7_reg;
                t1_V_reg_1323 <= second_order_float_sin_cos_K0_V_q0(29 downto 1);
                t1_V_reg_1323_pp0_iter7_reg <= t1_V_reg_1323;
                t1_V_reg_1323_pp0_iter8_reg <= t1_V_reg_1323_pp0_iter7_reg;
                tmp_1_reg_1261 <= select_ln1513_fu_546_p3(28 downto 22);
                tmp_1_reg_1261_pp0_iter4_reg <= tmp_1_reg_1261;
                tmp_2_reg_1344 <= r_V_6_fu_865_p2(57 downto 42);
                tmp_3_reg_1349 <= r_V_6_fu_865_p2(41 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Med_V_reg_1219 <= r_V_8_fu_318_p2(99 downto 20);
                closepath_reg_1191 <= closepath_fu_266_p2;
                closepath_reg_1191_pp0_iter1_reg <= closepath_reg_1191;
                din_exp_V_reg_1184 <= data_V_fu_240_p1(30 downto 23);
                din_exp_V_reg_1184_pp0_iter1_reg <= din_exp_V_reg_1184;
                do_cos_read_reg_1170 <= do_cos;
                do_cos_read_reg_1170_pp0_iter1_reg <= do_cos_read_reg_1170;
                icmp_ln1019_1_reg_1213 <= icmp_ln1019_1_fu_309_p2;
                icmp_ln1019_1_reg_1213_pp0_iter1_reg <= icmp_ln1019_1_reg_1213;
                p_Result_17_reg_1178 <= data_V_fu_240_p1(31 downto 31);
                p_Result_17_reg_1178_pp0_iter1_reg <= p_Result_17_reg_1178;
                p_Result_18_reg_1198 <= p_Result_18_fu_272_p1;
                p_Result_18_reg_1198_pp0_iter1_reg <= p_Result_18_reg_1198;
                trunc_ln628_reg_1208 <= trunc_ln628_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (closepath_reg_1191_pp0_iter1_reg = ap_const_lv1_0))) then
                k_V_reg_1224 <= ret_V_fu_345_p2(79 downto 77);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_fu_554_p1 <= select_ln1513_fu_546_p3(22 - 1 downto 0);
    B_squared_fu_770_p1 <= grp_fu_1156_p2;
    B_squared_fu_770_p4 <= B_squared_fu_770_p1(29 downto 15);
    B_trunc_fu_568_p4 <= select_ln1513_fu_546_p3(21 downto 7);
    Ex_V_3_fu_494_p2 <= std_logic_vector(unsigned(select_ln482_fu_460_p3) - unsigned(zext_ln841_fu_473_p1));
    Ex_V_4_fu_901_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1286_pp0_iter9_reg(0) = '1') else 
        Ex_V_3_reg_1251_pp0_iter9_reg;
    Ex_V_fu_455_p2 <= std_logic_vector(unsigned(din_exp_V_reg_1184_pp0_iter2_reg) + unsigned(ap_const_lv8_83));
    Mx_V_1_fu_820_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1286_pp0_iter8_reg(0) = '1') else 
        Mx_V_reg_1246_pp0_iter8_reg;
    Mx_V_fu_484_p4 <= r_fu_479_p2(57 downto 29);
    Mx_bits_V_1_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_V_fu_350_p4));
    Mx_bits_V_3_fu_395_p3 <= 
        Mx_bits_V_1_fu_389_p2 when (p_Result_s_fu_383_p2(0) = '1') else 
        Mx_bits_V_fu_350_p4;
    Mx_bits_V_fu_350_p4 <= ret_V_fu_345_p2(76 downto 19);
    Mx_zeros_fu_451_p1 <= op_assign_fu_443_p3(6 - 1 downto 0);
    add_ln214_fu_276_p2 <= std_logic_vector(unsigned(din_exp_V_fu_252_p4) + unsigned(ap_const_lv8_C2));
    add_ln319_fu_980_p2 <= std_logic_vector(unsigned(c_2_fu_953_p3) + unsigned(ap_const_lv32_10));
    add_ln329_fu_1004_p2 <= std_logic_vector(signed(sext_ln186_fu_907_p1) + signed(ap_const_lv9_7F));
    addr_V_fu_282_p3 <= 
        ap_const_lv8_3F when (closepath_fu_266_p2(0) = '1') else 
        add_ln214_fu_276_p2;
    and_ln300_1_fu_1105_p2 <= (icmp_ln1019_reg_1272_pp0_iter9_reg and icmp_ln1019_1_reg_1213_pp0_iter9_reg);
    and_ln300_fu_737_p2 <= (icmp_ln1019_reg_1272_pp0_iter4_reg and icmp_ln1019_1_reg_1213_pp0_iter4_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_28_fu_1143_p4;
    
    c_2_fu_953_p3_proc : process(p_Result_26_fu_943_p4)
    begin
        c_2_fu_953_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_943_p4(i) = '1' then
                c_2_fu_953_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    c_fu_935_p3_proc : process(p_Result_25_fu_925_p4)
    begin
        c_fu_935_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_925_p4(i) = '1' then
                c_fu_935_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    closepath_fu_266_p2 <= "1" when (unsigned(din_exp_V_fu_252_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_619_p3 <= 
        xor_ln271_fu_613_p2 when (do_cos_read_reg_1170_pp0_iter4_reg(0) = '1') else 
        tmp_s_fu_592_p10;
    data_V_fu_240_p1 <= t_in;
    din_exp_V_fu_252_p4 <= data_V_fu_240_p1(30 downto 23);
    din_sig_V_fu_262_p1 <= data_V_fu_240_p1(23 - 1 downto 0);
    empty_fu_1067_p1 <= newexp_fu_1014_p2(8 - 1 downto 0);

    grp_fu_1156_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1156_ce <= ap_const_logic_1;
        else 
            grp_fu_1156_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1156_p0 <= zext_ln1271_fu_578_p1(15 - 1 downto 0);
    grp_fu_1156_p1 <= zext_ln1271_fu_578_p1(15 - 1 downto 0);

    grp_fu_1163_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1163_ce <= ap_const_logic_1;
        else 
            grp_fu_1163_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1163_p0 <= grp_fu_1163_p00(15 - 1 downto 0);
    grp_fu_1163_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_fu_770_p4),30));
    icmp_ln1019_1_fu_309_p2 <= "1" when (din_sig_V_fu_262_p1 = ap_const_lv23_0) else "0";
    icmp_ln1019_2_fu_587_p2 <= "1" when (din_exp_V_reg_1184_pp0_iter2_reg = ap_const_lv8_FF) else "0";
    icmp_ln1019_fu_582_p2 <= "1" when (din_exp_V_reg_1184_pp0_iter2_reg = ap_const_lv8_0) else "0";
    icmp_ln1653_fu_1028_p2 <= "1" when (result_V_reg_1338 = ap_const_lv29_0) else "0";
    icmp_ln321_fu_974_p2 <= "1" when (c_fu_935_p3 = ap_const_lv32_10) else "0";
    isNeg_fu_504_p3 <= Ex_V_3_fu_494_p2(7 downto 7);
    k_V_1_fu_467_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1191_pp0_iter2_reg(0) = '1') else 
        k_V_reg_1224;
    lshr_ln1488_fu_534_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1488_fu_530_p1),to_integer(unsigned('0' & sext_ln1512_fu_526_p1(31-1 downto 0)))));
    lshr_ln_fu_290_p4 <= addr_V_fu_282_p3(7 downto 4);
    newexp_fu_1014_p2 <= std_logic_vector(signed(sext_ln329_fu_1010_p1) - signed(shift_1_fu_996_p3));
    
    op_assign_fu_443_p3_proc : process(sext_ln1198_fu_439_p1)
    begin
        op_assign_fu_443_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_439_p1(i) = '1' then
                op_assign_fu_443_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_ln300_fu_1123_p2 <= (icmp_ln1019_2_reg_1278_pp0_iter9_reg or and_ln300_reg_1307_pp0_iter9_reg);
    or_ln311_fu_1085_p2 <= (or_ln335_fu_1033_p2 or icmp_ln1019_2_reg_1278_pp0_iter9_reg);
    or_ln335_fu_1033_p2 <= (tmp_10_fu_1020_p3 or icmp_ln1653_fu_1028_p2);
    p_Result_18_fu_272_p1 <= data_V_fu_240_p1(23 - 1 downto 0);
    p_Result_19_fu_334_p3 <= (ap_const_lv1_1 & p_Result_18_reg_1198_pp0_iter1_reg);
    p_Result_20_fu_413_p3 <= (tmp_6_fu_403_p4 & ap_const_lv1_1);
    p_Result_21_fu_431_p3 <= (ap_const_lv1_1 & p_Result_2_fu_421_p4);
    p_Result_22_fu_633_p3 <= (sin_basis_fu_626_p3 & tmp_1_reg_1261_pp0_iter4_reg);
    p_Result_23_fu_911_p3 <= (tmp_2_reg_1344 & ap_const_lv16_8000);
    p_Result_24_fu_918_p3 <= (tmp_3_reg_1349 & ap_const_lv19_40000);
    
    p_Result_25_fu_925_p4_proc : process(p_Result_23_fu_911_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_25_fu_925_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_23_fu_911_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_25_fu_925_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_25_fu_925_p4_i) := p_Result_23_fu_911_p3(32-1-p_Result_25_fu_925_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_25_fu_925_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_26_fu_943_p4_proc : process(p_Result_24_fu_918_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_26_fu_943_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_24_fu_918_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_26_fu_943_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_26_fu_943_p4_i) := p_Result_24_fu_918_p3(32-1-p_Result_26_fu_943_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_26_fu_943_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_27_fu_647_p3 <= (p_Result_17_reg_1178_pp0_iter4_reg & k_V_1_reg_1240_pp0_iter4_reg);
    p_Result_28_fu_1143_p4 <= ((results_sign_V_4_reg_1313_pp0_iter9_reg & results_exp_V_fu_1098_p3) & results_sig_V_fu_1135_p3);
    
    p_Result_2_fu_421_p4_proc : process(p_Result_20_fu_413_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_2_fu_421_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_20_fu_413_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_2_fu_421_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_2_fu_421_p4_i) := p_Result_20_fu_413_p3(30-1-p_Result_2_fu_421_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_2_fu_421_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Result_s_fu_383_p2 <= (xor_ln1027_fu_378_p2 and tmp_fu_370_p3);
    r_V_2_fu_800_p1 <= r_V_2_fu_800_p10(22 - 1 downto 0);
    r_V_2_fu_800_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1256_pp0_iter5_reg),45));
    r_V_6_fu_865_p1 <= r_V_6_fu_865_p10(29 - 1 downto 0);
    r_V_6_fu_865_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_1_fu_820_p3),58));
    r_V_8_fu_318_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln930_fu_315_p1(31-1 downto 0)))));
    r_V_9_fu_970_p1 <= shl_ln1454_1_fu_964_p2(28 - 1 downto 0);
    r_fu_479_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_reg_1229),to_integer(unsigned('0' & zext_ln1454_fu_476_p1(31-1 downto 0)))));
    ref_4oPi_table_100_V_address0 <= zext_ln541_1_fu_300_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_1_fu_1090_p3 <= 
        select_ln311_fu_1078_p3 when (or_ln311_fu_1085_p2(0) = '1') else 
        empty_fu_1067_p1;
    results_exp_V_fu_1098_p3 <= 
        select_ln288_fu_1071_p3 when (and_ln300_reg_1307_pp0_iter9_reg(0) = '1') else 
        results_exp_V_1_fu_1090_p3;
    results_sig_V_fu_1135_p3 <= 
        select_ln300_3_fu_1115_p3 when (or_ln300_fu_1123_p2(0) = '1') else 
        select_ln300_fu_1127_p3;
    results_sign_V_2_fu_746_p2 <= (xor_ln307_fu_741_p2 and p_Result_17_reg_1178_pp0_iter4_reg);
    results_sign_V_3_fu_756_p2 <= (xor_ln311_fu_751_p2 and results_sign_V_fu_729_p3);
    results_sign_V_4_fu_762_p3 <= 
        results_sign_V_2_fu_746_p2 when (and_ln300_fu_737_p2(0) = '1') else 
        results_sign_V_3_fu_756_p2;
    results_sign_V_fu_729_p3 <= 
        tmp_4_fu_653_p18 when (cos_basis_fu_619_p3(0) = '1') else 
        tmp_5_fu_691_p18;
    ret_V_1_fu_841_p2 <= std_logic_vector(signed(sext_ln813_fu_835_p1) + signed(sext_ln813_1_fu_838_p1));
    ret_V_2_fu_851_p2 <= std_logic_vector(unsigned(ret_V_1_fu_841_p2) + unsigned(sext_ln1347_fu_847_p1));
    ret_V_fu_345_p1 <= ret_V_fu_345_p10(24 - 1 downto 0);
    ret_V_fu_345_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_19_fu_334_p3),80));
    rhs_2_fu_826_p4 <= grp_fu_1163_p2(29 downto 16);
    second_order_float_sin_cos_K0_V_address0 <= zext_ln541_fu_640_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K1_V_address0 <= zext_ln541_fu_640_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K2_V_address0 <= zext_ln541_fu_640_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1513_fu_546_p3 <= 
        lshr_ln1488_fu_534_p2 when (isNeg_fu_504_p3(0) = '1') else 
        shl_ln1454_fu_540_p2;
    select_ln288_fu_1071_p3 <= 
        ap_const_lv8_7F when (do_cos_read_reg_1170_pp0_iter9_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln300_3_fu_1115_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_1109_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln300_fu_1127_p3 <= 
        ap_const_lv23_0 when (or_ln335_fu_1033_p2(0) = '1') else 
        select_ln321_fu_1059_p3;
    select_ln311_fu_1078_p3 <= 
        ap_const_lv8_FF when (icmp_ln1019_2_reg_1278_pp0_iter9_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_fu_1059_p3 <= 
        tmp_8_fu_1039_p4 when (icmp_ln321_fu_974_p2(0) = '1') else 
        tmp_9_fu_1049_p4;
    select_ln482_fu_460_p3 <= 
        Ex_V_fu_455_p2 when (closepath_reg_1191_pp0_iter2_reg(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1198_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_21_fu_431_p3),32));

        sext_ln1347_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_fu_826_p4),30));

        sext_ln1512_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_518_p3),32));

        sext_ln1535_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_fu_494_p2),9));

        sext_ln186_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_901_p3),9));

        sext_ln329_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln329_fu_1004_p2),32));

        sext_ln813_1_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1328_pp0_iter8_reg),30));

        sext_ln813_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1323_pp0_iter8_reg),30));

    shift_1_fu_996_p3 <= 
        add_ln319_fu_980_p2 when (icmp_ln321_fu_974_p2(0) = '1') else 
        c_fu_935_p3;
    shl_ln1454_1_fu_964_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1488_1_fu_961_p1),to_integer(unsigned('0' & c_fu_935_p3(31-1 downto 0)))));
    shl_ln1454_2_fu_990_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1488_2_fu_986_p1),to_integer(unsigned('0' & c_2_fu_953_p3(31-1 downto 0)))));
    shl_ln1454_fu_540_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1488_fu_530_p1),to_integer(unsigned('0' & sext_ln1512_fu_526_p1(31-1 downto 0)))));
    sin_basis_fu_626_p3 <= 
        tmp_s_fu_592_p10 when (do_cos_read_reg_1170_pp0_iter4_reg(0) = '1') else 
        xor_ln271_fu_613_p2;
    sub_ln1512_fu_512_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1535_fu_500_p1));
    tmp_10_fu_1020_p3 <= newexp_fu_1014_p2(31 downto 31);
    tmp_6_fu_403_p4 <= Mx_bits_V_3_fu_395_p3(57 downto 29);
    tmp_8_fu_1039_p4 <= shl_ln1454_2_fu_990_p2(27 downto 5);
    tmp_9_fu_1049_p4 <= shl_ln1454_1_fu_964_p2(27 downto 5);
    tmp_fu_370_p3 <= ret_V_fu_345_p2(77 downto 77);
    trunc_ln628_fu_305_p1 <= addr_V_fu_282_p3(4 - 1 downto 0);
    ush_fu_518_p3 <= 
        sub_ln1512_fu_512_p2 when (isNeg_fu_504_p3(0) = '1') else 
        sext_ln1535_fu_500_p1;
    xor_ln1027_fu_378_p2 <= (closepath_reg_1191_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln271_fu_613_p2 <= (tmp_s_fu_592_p10 xor ap_const_lv1_1);
    xor_ln300_fu_1109_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1105_p2);
    xor_ln307_fu_741_p2 <= (do_cos_read_reg_1170_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln311_fu_751_p2 <= (icmp_ln1019_2_reg_1278_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln1271_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_fu_568_p4),30));
    zext_ln1454_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1234),58));
    zext_ln1488_1_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_reg_1338),32));
    zext_ln1488_2_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_fu_970_p1),32));
    zext_ln1488_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_fu_484_p4),32));
    zext_ln541_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_290_p4),64));
    zext_ln541_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_22_fu_633_p3),64));
    zext_ln841_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1234),8));
    zext_ln930_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1208),100));
end behav;
