// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut_dut,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.632333,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=133,HLS_SYN_LUT=239,HLS_VERSION=2022_2}" *)

module dut (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_TVALID,
        out_stream_TREADY,
        in_stream_TDATA,
        in_stream_TREADY,
        out_stream_TDATA,
        out_stream_TVALID
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_pp0_stage3 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_stream_TVALID;
input   out_stream_TREADY;
input  [7:0] in_stream_TDATA;
output   in_stream_TREADY;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln22_fu_170_p2;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] do_init_reg_69;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_do_init_phi_fu_74_p6;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
reg    out_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] bram_V_rewind_reg_86;
reg   [1:0] i1_reg_101;
reg   [31:0] bram_V_phi_reg_115;
reg   [7:0] in_stream_read_reg_178;
reg    ap_block_state2_pp0_stage0_iter0;
wire    regslice_both_out_stream_U_apdone_blk;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] in_stream_read_1_reg_183;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] in_stream_read_2_reg_188;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [1:0] i_fu_164_p2;
reg   [1:0] i_reg_198;
reg   [0:0] icmp_ln22_reg_203;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_bram_V_phi_phi_fu_119_p4;
wire   [31:0] bram_V_fu_127_p5;
reg   [31:0] ap_phi_reg_pp0_iter0_bram_V_phi_reg_115;
reg    ap_block_pp0_stage3_01001;
wire   [4:0] shl_ln_fu_137_p3;
wire   [31:0] zext_ln24_fu_145_p1;
wire   [31:0] lshr_ln24_fu_149_p2;
wire   [7:0] trunc_ln24_fu_155_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_stream_U_apdone_blk;
wire   [7:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_U_ack_in;
wire   [31:0] out_stream_TDATA_int_regslice;
reg    out_stream_TVALID_int_regslice;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_U_vld_out;
reg    ap_condition_106;
reg    ap_condition_52;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

dut_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_U_apdone_blk)
);

dut_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TDATA_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_52)) begin
        if ((do_init_reg_69 == 1'd1)) begin
            bram_V_phi_reg_115 <= bram_V_fu_127_p5;
        end else if ((1'b1 == 1'b1)) begin
            bram_V_phi_reg_115 <= ap_phi_reg_pp0_iter0_bram_V_phi_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        do_init_reg_69 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        do_init_reg_69 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i1_reg_101 <= i_reg_198;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        i1_reg_101 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (do_init_reg_69 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter0_bram_V_phi_reg_115 <= bram_V_rewind_reg_86;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        bram_V_rewind_reg_86 <= bram_V_phi_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        i_reg_198 <= i_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln22_reg_203 <= icmp_ln22_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_stream_read_1_reg_183 <= in_stream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in_stream_read_2_reg_188 <= in_stream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_read_reg_178 <= in_stream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_reg_203 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((do_init_reg_69 == 1'd1)) begin
        ap_phi_mux_bram_V_phi_phi_fu_119_p4 = bram_V_fu_127_p5;
    end else begin
        ap_phi_mux_bram_V_phi_phi_fu_119_p4 = ap_phi_reg_pp0_iter0_bram_V_phi_reg_115;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln22_reg_203 == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_74_p6 = 1'd1;
        end else if ((icmp_ln22_reg_203 == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_74_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_74_p6 = do_init_reg_69;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_74_p6 = do_init_reg_69;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln22_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int_regslice;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_stream_TVALID_int_regslice = 1'b1;
    end else begin
        out_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((do_init_reg_69 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_stream_TREADY_int_regslice == 1'b0) | ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_stream_TREADY_int_regslice == 1'b0) | ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_stream_TREADY_int_regslice == 1'b0) | ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((ap_phi_mux_do_init_phi_fu_74_p6 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((out_stream_TREADY_int_regslice == 1'b0) | ((do_init_reg_69 == 1'd1) & (in_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_106 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_52 = ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bram_V_fu_127_p5 = {{{{in_stream_TDATA_int_regslice}, {in_stream_read_2_reg_188}}, {in_stream_read_1_reg_183}}, {in_stream_read_reg_178}};

assign i_fu_164_p2 = (i1_reg_101 + 2'd1);

assign icmp_ln22_fu_170_p2 = ((i1_reg_101 == 2'd3) ? 1'b1 : 1'b0);

assign in_stream_TREADY = regslice_both_in_stream_U_ack_in;

assign lshr_ln24_fu_149_p2 = ap_phi_mux_bram_V_phi_phi_fu_119_p4 >> zext_ln24_fu_145_p1;

assign out_stream_TDATA_int_regslice = trunc_ln24_fu_155_p1;

assign out_stream_TVALID = regslice_both_out_stream_U_vld_out;

assign shl_ln_fu_137_p3 = {{i1_reg_101}, {3'd0}};

assign trunc_ln24_fu_155_p1 = lshr_ln24_fu_149_p2[7:0];

assign zext_ln24_fu_145_p1 = shl_ln_fu_137_p3;

endmodule //dut
