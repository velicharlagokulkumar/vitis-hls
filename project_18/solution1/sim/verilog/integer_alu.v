// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="integer_alu_integer_alu,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.927500,HLS_SYN_LAT=13,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=655,HLS_SYN_LUT=439,HLS_VERSION=2022_2}" *)

module integer_alu (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_TVALID,
        in2_TVALID,
        op_TVALID,
        out_r_TREADY,
        in1_TDATA,
        in1_TREADY,
        in2_TDATA,
        in2_TREADY,
        op_TDATA,
        op_TREADY,
        out_r_TDATA,
        out_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in1_TVALID;
input   in2_TVALID;
input   op_TVALID;
input   out_r_TREADY;
input  [7:0] in1_TDATA;
output   in1_TREADY;
input  [7:0] in2_TDATA;
output   in2_TREADY;
input  [7:0] op_TDATA;
output   op_TREADY;
output  [15:0] out_r_TDATA;
output   out_r_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state13_pp0_stage0_iter12;
wire    regslice_both_out_r_U_apdone_blk;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
reg    in1_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    in2_TDATA_blk_n;
reg    op_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
reg  signed [7:0] a_V_reg_192;
reg    ap_block_pp0_stage0_11001;
reg  signed [7:0] a_V_reg_192_pp0_iter1_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter2_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter3_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter4_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter5_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter6_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter7_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter8_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter9_reg;
reg  signed [7:0] a_V_reg_192_pp0_iter10_reg;
reg  signed [7:0] b_V_reg_202;
reg  signed [7:0] b_V_reg_202_pp0_iter1_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter2_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter3_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter4_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter5_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter6_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter7_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter8_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter9_reg;
reg  signed [7:0] b_V_reg_202_pp0_iter10_reg;
wire   [2:0] operation_V_fu_101_p1;
reg   [2:0] operation_V_reg_212;
reg   [2:0] operation_V_reg_212_pp0_iter1_reg;
reg   [2:0] operation_V_reg_212_pp0_iter2_reg;
reg   [2:0] operation_V_reg_212_pp0_iter3_reg;
reg   [2:0] operation_V_reg_212_pp0_iter4_reg;
reg   [2:0] operation_V_reg_212_pp0_iter5_reg;
reg   [2:0] operation_V_reg_212_pp0_iter6_reg;
reg   [2:0] operation_V_reg_212_pp0_iter7_reg;
reg   [2:0] operation_V_reg_212_pp0_iter8_reg;
reg   [2:0] operation_V_reg_212_pp0_iter9_reg;
reg   [2:0] operation_V_reg_212_pp0_iter10_reg;
reg   [2:0] operation_V_reg_212_pp0_iter11_reg;
wire  signed [15:0] sext_ln42_fu_123_p1;
wire  signed [15:0] sext_ln39_fu_131_p1;
wire  signed [15:0] sext_ln36_fu_139_p1;
wire   [15:0] ret_V_2_fu_149_p2;
wire  signed [15:0] sext_ln27_fu_167_p1;
wire  signed [15:0] sext_ln24_fu_183_p1;
reg   [15:0] ap_phi_mux_result_phi_fu_80_p16;
wire   [15:0] ap_phi_reg_pp0_iter0_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter1_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter2_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter3_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter4_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter5_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter6_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter7_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter8_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter9_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter10_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter11_result_reg_75;
reg   [15:0] ap_phi_reg_pp0_iter12_result_reg_75;
wire  signed [15:0] sext_ln33_fu_187_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] sext_ln1513_fu_105_p0;
wire  signed [8:0] grp_fu_113_p0;
wire   [7:0] ret_V_6_fu_119_p2;
wire   [7:0] ret_V_5_fu_127_p2;
wire   [7:0] ret_V_4_fu_135_p2;
wire  signed [8:0] sext_ln186_2_fu_155_p1;
wire  signed [8:0] sext_ln186_3_fu_158_p1;
wire   [8:0] ret_V_1_fu_161_p2;
wire  signed [8:0] sext_ln186_1_fu_174_p1;
wire  signed [8:0] sext_ln186_fu_171_p1;
wire   [8:0] ret_V_fu_177_p2;
wire   [8:0] grp_fu_113_p2;
reg    grp_fu_113_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in1_U_apdone_blk;
wire   [7:0] in1_TDATA_int_regslice;
wire    in1_TVALID_int_regslice;
reg    in1_TREADY_int_regslice;
wire    regslice_both_in1_U_ack_in;
wire    regslice_both_in2_U_apdone_blk;
wire  signed [7:0] in2_TDATA_int_regslice;
wire    in2_TVALID_int_regslice;
reg    in2_TREADY_int_regslice;
wire    regslice_both_in2_U_ack_in;
wire    regslice_both_op_U_apdone_blk;
wire   [7:0] op_TDATA_int_regslice;
wire    op_TVALID_int_regslice;
reg    op_TREADY_int_regslice;
wire    regslice_both_op_U_ack_in;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

integer_alu_sdiv_9s_8s_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 9 ))
sdiv_9s_8s_9_13_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_113_p0),
    .din1(in2_TDATA_int_regslice),
    .ce(grp_fu_113_ce),
    .dout(grp_fu_113_p2)
);

integer_alu_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U2(
    .din0(b_V_reg_202_pp0_iter10_reg),
    .din1(a_V_reg_192_pp0_iter10_reg),
    .dout(ret_V_2_fu_149_p2)
);

integer_alu_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TDATA),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_U_ack_in),
    .data_out(in1_TDATA_int_regslice),
    .vld_out(in1_TVALID_int_regslice),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_U_apdone_blk)
);

integer_alu_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_TDATA),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in2_U_ack_in),
    .data_out(in2_TDATA_int_regslice),
    .vld_out(in2_TVALID_int_regslice),
    .ack_out(in2_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_U_apdone_blk)
);

integer_alu_regslice_both #(
    .DataWidth( 8 ))
regslice_both_op_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(op_TDATA),
    .vld_in(op_TVALID),
    .ack_in(regslice_both_op_U_ack_in),
    .data_out(op_TDATA_int_regslice),
    .vld_out(op_TVALID_int_regslice),
    .ack_out(op_TREADY_int_regslice),
    .apdone_blk(regslice_both_op_U_apdone_blk)
);

integer_alu_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_result_phi_fu_80_p16),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((operation_V_reg_212_pp0_iter10_reg == 3'd6)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln42_fu_123_p1;
        end else if ((operation_V_reg_212_pp0_iter10_reg == 3'd0)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln24_fu_183_p1;
        end else if ((operation_V_reg_212_pp0_iter10_reg == 3'd1)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln27_fu_167_p1;
        end else if ((operation_V_reg_212_pp0_iter10_reg == 3'd2)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= ret_V_2_fu_149_p2;
        end else if ((operation_V_reg_212_pp0_iter10_reg == 3'd4)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln36_fu_139_p1;
        end else if ((operation_V_reg_212_pp0_iter10_reg == 3'd5)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln39_fu_131_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter12_result_reg_75 <= ap_phi_reg_pp0_iter11_result_reg_75;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_V_reg_192 <= in1_TDATA_int_regslice;
        a_V_reg_192_pp0_iter1_reg <= a_V_reg_192;
        b_V_reg_202 <= in2_TDATA_int_regslice;
        b_V_reg_202_pp0_iter1_reg <= b_V_reg_202;
        operation_V_reg_212 <= operation_V_fu_101_p1;
        operation_V_reg_212_pp0_iter1_reg <= operation_V_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_V_reg_192_pp0_iter10_reg <= a_V_reg_192_pp0_iter9_reg;
        a_V_reg_192_pp0_iter2_reg <= a_V_reg_192_pp0_iter1_reg;
        a_V_reg_192_pp0_iter3_reg <= a_V_reg_192_pp0_iter2_reg;
        a_V_reg_192_pp0_iter4_reg <= a_V_reg_192_pp0_iter3_reg;
        a_V_reg_192_pp0_iter5_reg <= a_V_reg_192_pp0_iter4_reg;
        a_V_reg_192_pp0_iter6_reg <= a_V_reg_192_pp0_iter5_reg;
        a_V_reg_192_pp0_iter7_reg <= a_V_reg_192_pp0_iter6_reg;
        a_V_reg_192_pp0_iter8_reg <= a_V_reg_192_pp0_iter7_reg;
        a_V_reg_192_pp0_iter9_reg <= a_V_reg_192_pp0_iter8_reg;
        b_V_reg_202_pp0_iter10_reg <= b_V_reg_202_pp0_iter9_reg;
        b_V_reg_202_pp0_iter2_reg <= b_V_reg_202_pp0_iter1_reg;
        b_V_reg_202_pp0_iter3_reg <= b_V_reg_202_pp0_iter2_reg;
        b_V_reg_202_pp0_iter4_reg <= b_V_reg_202_pp0_iter3_reg;
        b_V_reg_202_pp0_iter5_reg <= b_V_reg_202_pp0_iter4_reg;
        b_V_reg_202_pp0_iter6_reg <= b_V_reg_202_pp0_iter5_reg;
        b_V_reg_202_pp0_iter7_reg <= b_V_reg_202_pp0_iter6_reg;
        b_V_reg_202_pp0_iter8_reg <= b_V_reg_202_pp0_iter7_reg;
        b_V_reg_202_pp0_iter9_reg <= b_V_reg_202_pp0_iter8_reg;
        operation_V_reg_212_pp0_iter10_reg <= operation_V_reg_212_pp0_iter9_reg;
        operation_V_reg_212_pp0_iter11_reg <= operation_V_reg_212_pp0_iter10_reg;
        operation_V_reg_212_pp0_iter2_reg <= operation_V_reg_212_pp0_iter1_reg;
        operation_V_reg_212_pp0_iter3_reg <= operation_V_reg_212_pp0_iter2_reg;
        operation_V_reg_212_pp0_iter4_reg <= operation_V_reg_212_pp0_iter3_reg;
        operation_V_reg_212_pp0_iter5_reg <= operation_V_reg_212_pp0_iter4_reg;
        operation_V_reg_212_pp0_iter6_reg <= operation_V_reg_212_pp0_iter5_reg;
        operation_V_reg_212_pp0_iter7_reg <= operation_V_reg_212_pp0_iter6_reg;
        operation_V_reg_212_pp0_iter8_reg <= operation_V_reg_212_pp0_iter7_reg;
        operation_V_reg_212_pp0_iter9_reg <= operation_V_reg_212_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_result_reg_75 <= ap_phi_reg_pp0_iter9_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter11_result_reg_75 <= ap_phi_reg_pp0_iter10_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_result_reg_75 <= ap_phi_reg_pp0_iter0_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_result_reg_75 <= ap_phi_reg_pp0_iter1_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_result_reg_75 <= ap_phi_reg_pp0_iter2_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_result_reg_75 <= ap_phi_reg_pp0_iter3_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_result_reg_75 <= ap_phi_reg_pp0_iter4_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_result_reg_75 <= ap_phi_reg_pp0_iter5_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_result_reg_75 <= ap_phi_reg_pp0_iter6_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_result_reg_75 <= ap_phi_reg_pp0_iter7_result_reg_75;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_result_reg_75 <= ap_phi_reg_pp0_iter8_result_reg_75;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if ((operation_V_reg_212_pp0_iter11_reg == 3'd3)) begin
        ap_phi_mux_result_phi_fu_80_p16 = sext_ln33_fu_187_p1;
    end else begin
        ap_phi_mux_result_phi_fu_80_p16 = ap_phi_reg_pp0_iter12_result_reg_75;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_113_ce = 1'b1;
    end else begin
        grp_fu_113_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_TDATA_blk_n = in1_TVALID_int_regslice;
    end else begin
        in1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in1_TREADY_int_regslice = 1'b1;
    end else begin
        in1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_TDATA_blk_n = in2_TVALID_int_regslice;
    end else begin
        in2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in2_TREADY_int_regslice = 1'b1;
    end else begin
        in2_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        op_TDATA_blk_n = op_TVALID_int_regslice;
    end else begin
        op_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        op_TREADY_int_regslice = 1'b1;
    end else begin
        op_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & ((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)) | ((ap_start == 1'b1) & ((op_TVALID_int_regslice == 1'b0) | (in2_TVALID_int_regslice == 1'b0) | (in1_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & ((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)) | ((ap_start == 1'b1) & ((op_TVALID_int_regslice == 1'b0) | (in2_TVALID_int_regslice == 1'b0) | (in1_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter13 == 1'b1) & ((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)) | ((ap_start == 1'b1) & ((op_TVALID_int_regslice == 1'b0) | (in2_TVALID_int_regslice == 1'b0) | (in1_TVALID_int_regslice == 1'b0))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = (out_r_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = ((regslice_both_out_r_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((op_TVALID_int_regslice == 1'b0) | (in2_TVALID_int_regslice == 1'b0) | (in1_TVALID_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_result_reg_75 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_113_p0 = sext_ln1513_fu_105_p0;

assign in1_TREADY = regslice_both_in1_U_ack_in;

assign in2_TREADY = regslice_both_in2_U_ack_in;

assign op_TREADY = regslice_both_op_U_ack_in;

assign operation_V_fu_101_p1 = op_TDATA_int_regslice[2:0];

assign out_r_TVALID = regslice_both_out_r_U_vld_out;

assign ret_V_1_fu_161_p2 = ($signed(sext_ln186_2_fu_155_p1) - $signed(sext_ln186_3_fu_158_p1));

assign ret_V_4_fu_135_p2 = (b_V_reg_202_pp0_iter10_reg & a_V_reg_192_pp0_iter10_reg);

assign ret_V_5_fu_127_p2 = (b_V_reg_202_pp0_iter10_reg | a_V_reg_192_pp0_iter10_reg);

assign ret_V_6_fu_119_p2 = (b_V_reg_202_pp0_iter10_reg ^ a_V_reg_192_pp0_iter10_reg);

assign ret_V_fu_177_p2 = ($signed(sext_ln186_1_fu_174_p1) + $signed(sext_ln186_fu_171_p1));

assign sext_ln1513_fu_105_p0 = in1_TDATA_int_regslice;

assign sext_ln186_1_fu_174_p1 = b_V_reg_202_pp0_iter10_reg;

assign sext_ln186_2_fu_155_p1 = a_V_reg_192_pp0_iter10_reg;

assign sext_ln186_3_fu_158_p1 = b_V_reg_202_pp0_iter10_reg;

assign sext_ln186_fu_171_p1 = a_V_reg_192_pp0_iter10_reg;

assign sext_ln24_fu_183_p1 = $signed(ret_V_fu_177_p2);

assign sext_ln27_fu_167_p1 = $signed(ret_V_1_fu_161_p2);

assign sext_ln33_fu_187_p1 = $signed(grp_fu_113_p2);

assign sext_ln36_fu_139_p1 = $signed(ret_V_4_fu_135_p2);

assign sext_ln39_fu_131_p1 = $signed(ret_V_5_fu_127_p2);

assign sext_ln42_fu_123_p1 = $signed(ret_V_6_fu_119_p2);

endmodule //integer_alu
