-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity integer_alu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_TVALID : IN STD_LOGIC;
    in2_TVALID : IN STD_LOGIC;
    op_TVALID : IN STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    in1_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in1_TREADY : OUT STD_LOGIC;
    in2_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in2_TREADY : OUT STD_LOGIC;
    op_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    op_TREADY : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_TVALID : OUT STD_LOGIC );
end;


architecture behav of integer_alu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "integer_alu_integer_alu,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.927500,HLS_SYN_LAT=13,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=655,HLS_SYN_LUT=439,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal in1_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in2_TDATA_blk_n : STD_LOGIC;
    signal op_TDATA_blk_n : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal a_V_reg_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_V_reg_192_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_192_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_202_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal operation_V_fu_101_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal operation_V_reg_212_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln42_fu_123_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln39_fu_131_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln36_fu_139_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_149_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln27_fu_167_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_fu_183_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_result_phi_fu_80_p16 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter12_result_reg_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln33_fu_187_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln1513_fu_105_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_6_fu_119_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_5_fu_127_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln186_2_fu_155_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln186_3_fu_158_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln186_1_fu_174_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln186_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_113_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in1_U_apdone_blk : STD_LOGIC;
    signal in1_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal in1_TVALID_int_regslice : STD_LOGIC;
    signal in1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_U_apdone_blk : STD_LOGIC;
    signal in2_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal in2_TVALID_int_regslice : STD_LOGIC;
    signal in2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_U_ack_in : STD_LOGIC;
    signal regslice_both_op_U_apdone_blk : STD_LOGIC;
    signal op_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal op_TVALID_int_regslice : STD_LOGIC;
    signal op_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_op_U_ack_in : STD_LOGIC;
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component integer_alu_sdiv_9s_8s_9_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component integer_alu_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component integer_alu_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    sdiv_9s_8s_9_13_1_U1 : component integer_alu_sdiv_9s_8s_9_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_113_p0,
        din1 => in2_TDATA_int_regslice,
        ce => grp_fu_113_ce,
        dout => grp_fu_113_p2);

    mul_8s_8s_16_1_1_U2 : component integer_alu_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_V_reg_202_pp0_iter10_reg,
        din1 => a_V_reg_192_pp0_iter10_reg,
        dout => ret_V_2_fu_149_p2);

    regslice_both_in1_U : component integer_alu_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_TDATA,
        vld_in => in1_TVALID,
        ack_in => regslice_both_in1_U_ack_in,
        data_out => in1_TDATA_int_regslice,
        vld_out => in1_TVALID_int_regslice,
        ack_out => in1_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_U_apdone_blk);

    regslice_both_in2_U : component integer_alu_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_TDATA,
        vld_in => in2_TVALID,
        ack_in => regslice_both_in2_U_ack_in,
        data_out => in2_TDATA_int_regslice,
        vld_out => in2_TVALID_int_regslice,
        ack_out => in2_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_U_apdone_blk);

    regslice_both_op_U : component integer_alu_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => op_TDATA,
        vld_in => op_TVALID,
        ack_in => regslice_both_op_U_ack_in,
        data_out => op_TDATA_int_regslice,
        vld_out => op_TVALID_int_regslice,
        ack_out => op_TREADY_int_regslice,
        apdone_blk => regslice_both_op_U_apdone_blk);

    regslice_both_out_r_U : component integer_alu_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_result_phi_fu_80_p16,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter12_result_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_6)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln42_fu_123_p1;
                elsif ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_0)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln24_fu_183_p1;
                elsif ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_1)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln27_fu_167_p1;
                elsif ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_2)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= ret_V_2_fu_149_p2;
                elsif ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_4)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln36_fu_139_p1;
                elsif ((operation_V_reg_212_pp0_iter10_reg = ap_const_lv3_5)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= sext_ln39_fu_131_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter12_result_reg_75 <= ap_phi_reg_pp0_iter11_result_reg_75;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_V_reg_192 <= in1_TDATA_int_regslice;
                a_V_reg_192_pp0_iter1_reg <= a_V_reg_192;
                b_V_reg_202 <= in2_TDATA_int_regslice;
                b_V_reg_202_pp0_iter1_reg <= b_V_reg_202;
                operation_V_reg_212 <= operation_V_fu_101_p1;
                operation_V_reg_212_pp0_iter1_reg <= operation_V_reg_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_V_reg_192_pp0_iter10_reg <= a_V_reg_192_pp0_iter9_reg;
                a_V_reg_192_pp0_iter2_reg <= a_V_reg_192_pp0_iter1_reg;
                a_V_reg_192_pp0_iter3_reg <= a_V_reg_192_pp0_iter2_reg;
                a_V_reg_192_pp0_iter4_reg <= a_V_reg_192_pp0_iter3_reg;
                a_V_reg_192_pp0_iter5_reg <= a_V_reg_192_pp0_iter4_reg;
                a_V_reg_192_pp0_iter6_reg <= a_V_reg_192_pp0_iter5_reg;
                a_V_reg_192_pp0_iter7_reg <= a_V_reg_192_pp0_iter6_reg;
                a_V_reg_192_pp0_iter8_reg <= a_V_reg_192_pp0_iter7_reg;
                a_V_reg_192_pp0_iter9_reg <= a_V_reg_192_pp0_iter8_reg;
                b_V_reg_202_pp0_iter10_reg <= b_V_reg_202_pp0_iter9_reg;
                b_V_reg_202_pp0_iter2_reg <= b_V_reg_202_pp0_iter1_reg;
                b_V_reg_202_pp0_iter3_reg <= b_V_reg_202_pp0_iter2_reg;
                b_V_reg_202_pp0_iter4_reg <= b_V_reg_202_pp0_iter3_reg;
                b_V_reg_202_pp0_iter5_reg <= b_V_reg_202_pp0_iter4_reg;
                b_V_reg_202_pp0_iter6_reg <= b_V_reg_202_pp0_iter5_reg;
                b_V_reg_202_pp0_iter7_reg <= b_V_reg_202_pp0_iter6_reg;
                b_V_reg_202_pp0_iter8_reg <= b_V_reg_202_pp0_iter7_reg;
                b_V_reg_202_pp0_iter9_reg <= b_V_reg_202_pp0_iter8_reg;
                operation_V_reg_212_pp0_iter10_reg <= operation_V_reg_212_pp0_iter9_reg;
                operation_V_reg_212_pp0_iter11_reg <= operation_V_reg_212_pp0_iter10_reg;
                operation_V_reg_212_pp0_iter2_reg <= operation_V_reg_212_pp0_iter1_reg;
                operation_V_reg_212_pp0_iter3_reg <= operation_V_reg_212_pp0_iter2_reg;
                operation_V_reg_212_pp0_iter4_reg <= operation_V_reg_212_pp0_iter3_reg;
                operation_V_reg_212_pp0_iter5_reg <= operation_V_reg_212_pp0_iter4_reg;
                operation_V_reg_212_pp0_iter6_reg <= operation_V_reg_212_pp0_iter5_reg;
                operation_V_reg_212_pp0_iter7_reg <= operation_V_reg_212_pp0_iter6_reg;
                operation_V_reg_212_pp0_iter8_reg <= operation_V_reg_212_pp0_iter7_reg;
                operation_V_reg_212_pp0_iter9_reg <= operation_V_reg_212_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_result_reg_75 <= ap_phi_reg_pp0_iter9_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_result_reg_75 <= ap_phi_reg_pp0_iter10_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_result_reg_75 <= ap_phi_reg_pp0_iter0_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_result_reg_75 <= ap_phi_reg_pp0_iter1_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_result_reg_75 <= ap_phi_reg_pp0_iter2_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_result_reg_75 <= ap_phi_reg_pp0_iter3_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_result_reg_75 <= ap_phi_reg_pp0_iter4_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_result_reg_75 <= ap_phi_reg_pp0_iter5_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_result_reg_75 <= ap_phi_reg_pp0_iter6_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_result_reg_75 <= ap_phi_reg_pp0_iter7_result_reg_75;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_result_reg_75 <= ap_phi_reg_pp0_iter8_result_reg_75;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, regslice_both_out_r_U_apdone_blk, in1_TVALID_int_regslice, in2_TVALID_int_regslice, op_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and ((op_TVALID_int_regslice = ap_const_logic_0) or (in2_TVALID_int_regslice = ap_const_logic_0) or (in1_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, regslice_both_out_r_U_apdone_blk, in1_TVALID_int_regslice, in2_TVALID_int_regslice, op_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and ((op_TVALID_int_regslice = ap_const_logic_0) or (in2_TVALID_int_regslice = ap_const_logic_0) or (in1_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, regslice_both_out_r_U_apdone_blk, in1_TVALID_int_regslice, in2_TVALID_int_regslice, op_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and ((op_TVALID_int_regslice = ap_const_logic_0) or (in2_TVALID_int_regslice = ap_const_logic_0) or (in1_TVALID_int_regslice = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter12_assign_proc : process(out_r_TREADY_int_regslice)
    begin
                ap_block_state13_pp0_stage0_iter12 <= (out_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state14_pp0_stage0_iter13_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state14_pp0_stage0_iter13 <= ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in1_TVALID_int_regslice, in2_TVALID_int_regslice, op_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((op_TVALID_int_regslice = ap_const_logic_0) or (in2_TVALID_int_regslice = ap_const_logic_0) or (in1_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_result_phi_fu_80_p16_assign_proc : process(operation_V_reg_212_pp0_iter11_reg, ap_phi_reg_pp0_iter12_result_reg_75, sext_ln33_fu_187_p1)
    begin
        if ((operation_V_reg_212_pp0_iter11_reg = ap_const_lv3_3)) then 
            ap_phi_mux_result_phi_fu_80_p16 <= sext_ln33_fu_187_p1;
        else 
            ap_phi_mux_result_phi_fu_80_p16 <= ap_phi_reg_pp0_iter12_result_reg_75;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_result_reg_75 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_113_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_113_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1513_fu_105_p0),9));


    in1_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in1_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in1_TDATA_blk_n <= in1_TVALID_int_regslice;
        else 
            in1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_TREADY <= regslice_both_in1_U_ack_in;

    in1_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in1_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in2_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in2_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in2_TDATA_blk_n <= in2_TVALID_int_regslice;
        else 
            in2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_TREADY <= regslice_both_in2_U_ack_in;

    in2_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in2_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    op_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, op_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            op_TDATA_blk_n <= op_TVALID_int_regslice;
        else 
            op_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    op_TREADY <= regslice_both_op_U_ack_in;

    op_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            op_TREADY_int_regslice <= ap_const_logic_1;
        else 
            op_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    operation_V_fu_101_p1 <= op_TDATA_int_regslice(3 - 1 downto 0);

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0, out_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_r_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_161_p2 <= std_logic_vector(signed(sext_ln186_2_fu_155_p1) - signed(sext_ln186_3_fu_158_p1));
    ret_V_4_fu_135_p2 <= (b_V_reg_202_pp0_iter10_reg and a_V_reg_192_pp0_iter10_reg);
    ret_V_5_fu_127_p2 <= (b_V_reg_202_pp0_iter10_reg or a_V_reg_192_pp0_iter10_reg);
    ret_V_6_fu_119_p2 <= (b_V_reg_202_pp0_iter10_reg xor a_V_reg_192_pp0_iter10_reg);
    ret_V_fu_177_p2 <= std_logic_vector(signed(sext_ln186_1_fu_174_p1) + signed(sext_ln186_fu_171_p1));
    sext_ln1513_fu_105_p0 <= in1_TDATA_int_regslice;
        sext_ln186_1_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V_reg_202_pp0_iter10_reg),9));

        sext_ln186_2_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_V_reg_192_pp0_iter10_reg),9));

        sext_ln186_3_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V_reg_202_pp0_iter10_reg),9));

        sext_ln186_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_V_reg_192_pp0_iter10_reg),9));

        sext_ln24_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_177_p2),16));

        sext_ln27_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_fu_161_p2),16));

        sext_ln33_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_113_p2),16));

        sext_ln36_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_4_fu_135_p2),16));

        sext_ln39_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_fu_127_p2),16));

        sext_ln42_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_fu_119_p2),16));

end behav;
